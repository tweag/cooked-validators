name: Build and test

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-test:
    name: Build and run tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code (from PR).
      uses: actions/checkout@v3.3.0

    - name: Install nix.
      uses: cachix/install-nix-action@v18
      with:
        ## Some flake caching
        extra_nix_config: |
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      
    ## Example from
    ## https://github.com/actions/cache/blob/ac25611caef967612169ab7e95533cf932c32270/examples.md#haskell---cabal
    - name: Accessing the cabal cache.
      uses: actions/cache@v3
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-${{ hashFiles('**/*.cabal', '**/cabal.project', '**/cabal.project.freeze') }}
        restore-keys: ${{ runner.os }}-

    - name: Build and run tests
      run: |
        nix flake check
        nix develop .#ci --command cabal update
        nix develop .#ci --command bash ci/run-tests.sh --ci

    - name: Upload tests output
      uses: actions/upload-artifact@v3
      with:
        name: plutus-libs-checks
        path: |
          ./*.out
          ./*.res

  check-result:
    needs: build-and-test
    name: Check tests output
    runs-on: ubuntu-latest
    steps:
    - name: Accessing tests output
      uses: actions/download-artifact@v3
      with:
        name: plutus-libs-checks

    - name: Check tests output
      run: |
        is_ok=true
        for proj in "examples" "cooked-validators" "pirouette-plutusir"; do
          for step in "cabal-build" "cabal-test"; do
            echo "!! [$proj]: output from $step"
            cat $proj-$step.out
            res=$(cat $proj-$step.res | cut -d':' -f2)
            if [[ "$res" != "0" ]]; then 
              is_ok=false
            fi
          done
        done

        ## Because there will be a lot of tests, we print a summary of the results
        echo "Summary of results (1 is failure)"
        for proj in "examples" "cooked-validators" "pirouette-plutusir"; do
          echo "Summary for: $proj"
          cat ${proj}-*.res
        done

        if $is_ok; then
          exit 0
        else
          exit 1
        fi

