---

name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

jobs:

  cache-minimal-nix-dependencies:
    name: Cache minimal Nix dependencies

    runs-on: ubuntu-latest
    needs: []

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3.3.0

      - name: Install Nix
        uses: cachix/install-nix-action@v19
        with:
          extra_nix_config: |
            ## Access token to avoid triggering GitHub's rate limiting.
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Nix caches
        uses: cachix/cachix-action@v12
        with:
          name: tweag-plutus-libs
          ## This auth token will give write access to the cache, meaning that
          ## everything that happens in CI will be pushed at the end of the job.
          authToken: '${{ secrets.CACHIX_TWEAG_PLUTUS_LIBS_AUTH_TOKEN }}'

      - name: Build Nix CI environment
        run: |
          nix develop .#ci --command true

  cache-all-nix-dependencies:
    name: Cache all Nix dependencies

    runs-on: ubuntu-latest
    needs: cache-minimal-nix-dependencies

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3.3.0

      - name: Install Nix
        uses: cachix/install-nix-action@v19
        with:
          extra_nix_config: |
            ## Access token to avoid triggering GitHub's rate limiting.
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Nix caches
        uses: cachix/cachix-action@v12
        with:
          name: tweag-plutus-libs
          ## This auth token will give write access to the cache, meaning that
          ## everything that happens in CI will be pushed at the end of the job.
          authToken: '${{ secrets.CACHIX_TWEAG_PLUTUS_LIBS_AUTH_TOKEN }}'

      - name: Build all Nix environments
        run: |
          ## REVIEW: There might be a way to just build all the devShells? Also,
          ## we might want to consider building all the package dependencies?
          nix develop .#ci --command true
          nix develop      --command true

  build-and-test:
    name: Build and run tests

    runs-on: ubuntu-latest
    needs: cache-minimal-nix-dependencies

    steps:
      - name: Check out repository code (from PR).
        uses: actions/checkout@v3.3.0

      - name: Install Nix
        uses: cachix/install-nix-action@v19
        with:
          extra_nix_config: |
            ## Access token to avoid triggering GitHub's rate limiting.
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Nix caches
        uses: cachix/cachix-action@v12
        with:
          name: tweag-plutus-libs
          ## No auth token: read only cache.

      ## Example from
      ## https://github.com/actions/cache/blob/ac25611caef967612169ab7e95533cf932c32270/examples.md#haskell---cabal
      - name: Accessing the Cabal cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-${{ hashFiles('**/*.cabal', '**/cabal.project', '**/cabal.project.freeze', 'flake.nix', 'flake.lock') }}-build-and-test
          restore-keys: ${{ runner.os }}-

      ## Steps below run a certain program and creates two files:
      ## `${proj}-${step}.res` and `${proj}-${step}.out`. The former contains a
      ## string encoding the return code of the tool whereas the latter contains
      ## a human-readable description of what happened.
      ##
      ## The point of this is that we will execute these steps but we "succeed"
      ## iff the build is ok. Another job will then check the resulting files
      ## for their exit codes. This is ugly but it ensures that the `cabal
      ## build` gets cached even if tests fail, which means we save a lot of
      ## time (and CI runner money) in the long run.
      ##
      - name: Build and run tests
        run: |
          nix develop .#ci --command bash -c '
            set -xuo

            cabal update

            cabal_builds_all_ok=true

            for proj in examples cooked-validators; do
              pushd "$proj" || exit

              echo "Running `cabal build` on $proj"
              cabal_res=0
              cabal build | tee "../${proj}-cabal-build.out"
              cabal_res=$?
              echo "cabal_build:$cabal_res" > "../${proj}-cabal-build.res"
              if [ $cabal_res -ne 0 ]; then
                cabal_builds_all_ok=false
              fi

              echo "Running `cabal run tests` on $proj"
              cabal_res=0
              cabal run tests | tee "../${proj}-cabal-test.out"
              cabal_res=$?
              echo "run_cabal_test:$cabal_res" > "../${proj}-cabal-test.res"

              popd || exit
            done

            if ! $cabal_builds_all_ok; then
              exit 1
            fi
          '

      - name: Upload build and test outputs
        uses: actions/upload-artifact@v3
        with:
          name: plutus-libs-checks
          path: |
            ./*.out
            ./*.res

  check-result:
    name: Check tests output

    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Access build and test outputs
        uses: actions/download-artifact@v3
        with:
          name: plutus-libs-checks

      - name: Check tests output
        run: |
          is_ok=true

          for proj in examples cooked-validators; do
            for step in cabal-build cabal-test; do
              echo "!! [$proj]: output from $step"
              cat $proj-$step.out
              res=$(cat $proj-$step.res | cut -d':' -f2)
              if [ "$res" -ne 0 ]; then
                is_ok=false
              fi
            done
          done

          ## Because there will be a lot of tests, we print a summary of the
          ## results
          echo "Summary of results (1 is failure)"
          for proj in examples cooked-validators; do
            echo "Summary for: $proj"
            cat ${proj}-*.res
          done

          if $is_ok; then
            exit 0
          else
            exit 1
          fi


  build-and-deploy-documentation:
    name: Build and deploy documentation

    runs-on: ubuntu-latest
    needs: cache-minimal-nix-dependencies

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3.3.0

      - name: Install Nix
        uses: cachix/install-nix-action@v19
        with:
          extra_nix_config: |
            ## Access token to avoid triggering GitHub's rate limiting.
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Nix caches
        uses: cachix/cachix-action@v12
        with:
          name: tweag-plutus-libs
          ## No auth token: read only cache.

      ## Example from
      ## https://github.com/actions/cache/blob/ac25611caef967612169ab7e95533cf932c32270/examples.md#haskell---cabal
      - name: Accessing the Cabal cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-${{ hashFiles('**/*.cabal', '**/cabal.project', '**/cabal.project.freeze', 'flake.nix', 'flake.lock') }}-haddock
          restore-keys: ${{ runner.os }}-

      - name: Build documentation
        run: |
          nix develop .#ci --command bash -c '
            set -o xtrace

            cabal update

            cabal haddock \
              --haddock-hyperlink-source \
              --haddock-html-location="http://hackage.haskell.org/packages/archive/\$pkg/latest/doc/html" \
              cooked-validators

            mkdir -p docs
            cp --force --recursive dist-newstyle/build/*/ghc-*/cooked-validators-*/doc/html/cooked-validators/* docs
          '

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

  run-and-cache-flake-checks:
    name: Run and cache flake checks

    runs-on: ubuntu-latest
    needs: []

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3.3.0

      - name: Install Nix
        uses: cachix/install-nix-action@v19
        with:
          extra_nix_config: |
            ## Access token to avoid triggering GitHub's rate limiting.
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Nix caches
        uses: cachix/cachix-action@v11
        with:
          name: tweag-plutus-libs
          ## This auth token will give write access to the cache, meaning that
          ## everything that happens in CI will be pushed at the end of the job.
          authToken: '${{ secrets.CACHIX_TWEAG_PLUTUS_LIBS_AUTH_TOKEN }}'

      - name: Run flake checks
        run: nix flake check --print-build-logs
