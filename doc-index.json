[{"display_html":"<a href=\"#v:quickTokenName\">quickTokenName</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; TokenName","name":"quickTokenName","module":"Cooked.Currencies","link":"Cooked-Currencies.html#v:quickTokenName"},{"display_html":"<a href=\"#v:quickAssetClass\">quickAssetClass</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; AssetClass","name":"quickAssetClass","module":"Cooked.Currencies","link":"Cooked-Currencies.html#v:quickAssetClass"},{"display_html":"<a href=\"#v:quickValue\">quickValue</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; Value","name":"quickValue","module":"Cooked.Currencies","link":"Cooked-Currencies.html#v:quickValue"},{"display_html":"<a href=\"#v:permanentTokenName\">permanentTokenName</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; TokenName","name":"permanentTokenName","module":"Cooked.Currencies","link":"Cooked-Currencies.html#v:permanentTokenName"},{"display_html":"<a href=\"#v:permanentAssetClass\">permanentAssetClass</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; AssetClass","name":"permanentAssetClass","module":"Cooked.Currencies","link":"Cooked-Currencies.html#v:permanentAssetClass"},{"display_html":"<a href=\"#v:permanentValue\">permanentValue</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; Value","name":"permanentValue","module":"Cooked.Currencies","link":"Cooked-Currencies.html#v:permanentValue"},{"display_html":"<a href=\"#v:quickCurrencyPolicy\">quickCurrencyPolicy</a> :: MintingPolicy","name":"quickCurrencyPolicy","module":"Cooked.Currencies","link":"Cooked-Currencies.html#v:quickCurrencyPolicy"},{"display_html":"<a href=\"#v:quickCurrencySymbol\">quickCurrencySymbol</a> :: CurrencySymbol","name":"quickCurrencySymbol","module":"Cooked.Currencies","link":"Cooked-Currencies.html#v:quickCurrencySymbol"},{"display_html":"<a href=\"#v:permanentCurrencyPolicy\">permanentCurrencyPolicy</a> :: MintingPolicy","name":"permanentCurrencyPolicy","module":"Cooked.Currencies","link":"Cooked-Currencies.html#v:permanentCurrencyPolicy"},{"display_html":"<a href=\"#v:permanentCurrencySymbol\">permanentCurrencySymbol</a> :: CurrencySymbol","name":"permanentCurrencySymbol","module":"Cooked.Currencies","link":"Cooked-Currencies.html#v:permanentCurrencySymbol"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Ltl\">Ltl</a> a<ul class=\"subs\"><li>= <a href=\"#v:LtlTruth\">LtlTruth</a></li><li>| <a href=\"#v:LtlFalsity\">LtlFalsity</a></li><li>| <a href=\"#v:LtlAtom\">LtlAtom</a> a</li><li>| <a href=\"#v:LtlOr\">LtlOr</a> (<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a) (<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a)</li><li>| <a href=\"#v:LtlAnd\">LtlAnd</a> (<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a) (<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a)</li><li>| <a href=\"#v:LtlNext\">LtlNext</a> (<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a)</li><li>| <a href=\"#v:LtlUntil\">LtlUntil</a> (<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a) (<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a)</li><li>| <a href=\"#v:LtlRelease\">LtlRelease</a> (<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a) (<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a)</li></ul>","name":"Ltl LtlTruth LtlFalsity LtlAtom LtlOr LtlAnd LtlNext LtlUntil LtlRelease","module":"Cooked.Ltl","link":"Cooked-Ltl.html#t:Ltl"},{"display_html":"<a href=\"#v:nowLater\">nowLater</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Semigroup.html#t:Monoid\" title=\"Distribution.Compat.Semigroup\">Monoid</a> a =&gt; <a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a -&gt; [(a, <a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a)]","name":"nowLater","module":"Cooked.Ltl","link":"Cooked-Ltl.html#v:nowLater"},{"display_html":"<a href=\"#v:nowLaterList\">nowLaterList</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Semigroup.html#t:Monoid\" title=\"Distribution.Compat.Semigroup\">Monoid</a> a =&gt; [<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a] -&gt; [(a, [<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> a])]","name":"nowLaterList","module":"Cooked.Ltl","link":"Cooked-Ltl.html#v:nowLaterList"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:LtlOp\">LtlOp</a> (modification :: *) (builtin :: * -&gt; *) :: * -&gt; * <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:StartLtl\">StartLtl</a> :: <a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> modification -&gt; <a href=\"Cooked-Ltl.html#t:LtlOp\" title=\"Cooked.Ltl\">LtlOp</a> modification builtin ()</li><li><a href=\"#v:StopLtl\">StopLtl</a> :: <a href=\"Cooked-Ltl.html#t:LtlOp\" title=\"Cooked.Ltl\">LtlOp</a> modification builtin ()</li><li><a href=\"#v:Builtin\">Builtin</a> :: builtin a -&gt; <a href=\"Cooked-Ltl.html#t:LtlOp\" title=\"Cooked.Ltl\">LtlOp</a> modification builtin a</li></ul>","name":"LtlOp Builtin StartLtl StopLtl","module":"Cooked.Ltl","link":"Cooked-Ltl.html#t:LtlOp"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Staged\">Staged</a> (op :: * -&gt; *) :: * -&gt; * <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Return\">Return</a> :: a -&gt; <a href=\"Cooked-Ltl.html#t:Staged\" title=\"Cooked.Ltl\">Staged</a> op a</li><li><a href=\"#v:Instr\">Instr</a> :: op a -&gt; (a -&gt; <a href=\"Cooked-Ltl.html#t:Staged\" title=\"Cooked.Ltl\">Staged</a> op b) -&gt; <a href=\"Cooked-Ltl.html#t:Staged\" title=\"Cooked.Ltl\">Staged</a> op b</li></ul>","name":"Staged Return Instr","module":"Cooked.Ltl","link":"Cooked-Ltl.html#t:Staged"},{"display_html":"<a href=\"#v:interpLtl\">interpLtl</a> :: <a href=\"Cooked-Ltl.html#t:InterpLtl\" title=\"Cooked.Ltl\">InterpLtl</a> modification builtin m =&gt; <a href=\"Cooked-Ltl.html#t:Staged\" title=\"Cooked.Ltl\">Staged</a> (<a href=\"Cooked-Ltl.html#t:LtlOp\" title=\"Cooked.Ltl\">LtlOp</a> modification builtin) a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Lazy.html#t:StateT\" title=\"Control.Monad.State.Lazy\">StateT</a> [<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> modification] m a","name":"interpLtl","module":"Cooked.Ltl","link":"Cooked-Ltl.html#v:interpLtl"},{"display_html":"<a href=\"#v:interpLtlAndPruneUnfinished\">interpLtlAndPruneUnfinished</a> :: <a href=\"Cooked-Ltl.html#t:InterpLtl\" title=\"Cooked.Ltl\">InterpLtl</a> modification builtin m =&gt; <a href=\"Cooked-Ltl.html#t:Staged\" title=\"Cooked.Ltl\">Staged</a> (<a href=\"Cooked-Ltl.html#t:LtlOp\" title=\"Cooked.Ltl\">LtlOp</a> modification builtin) a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Lazy.html#t:StateT\" title=\"Control.Monad.State.Lazy\">StateT</a> [<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> modification] m a","name":"interpLtlAndPruneUnfinished","module":"Cooked.Ltl","link":"Cooked-Ltl.html#v:interpLtlAndPruneUnfinished"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:MonadPlus\" title=\"Distribution.Compat.Prelude.Internal\">MonadPlus</a> m =&gt; <a href=\"#t:InterpLtl\">InterpLtl</a> modification builtin m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:interpBuiltin\">interpBuiltin</a> :: builtin a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Lazy.html#t:StateT\" title=\"Control.Monad.State.Lazy\">StateT</a> [<a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> modification] m a</li></ul>","name":"InterpLtl interpBuiltin","module":"Cooked.Ltl","link":"Cooked-Ltl.html#t:InterpLtl"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; <a href=\"#t:MonadModal\">MonadModal</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><span class=\"keyword\">type</span> <a href=\"#t:Modification\">Modification</a> m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a></li><li><a href=\"#v:modifyLtl\">modifyLtl</a> :: <a href=\"Cooked-Ltl.html#t:Ltl\" title=\"Cooked.Ltl\">Ltl</a> (<a href=\"Cooked-Ltl.html#t:Modification\" title=\"Cooked.Ltl\">Modification</a> m) -&gt; m a -&gt; m a</li></ul>","name":"MonadModal Modification modifyLtl","module":"Cooked.Ltl","link":"Cooked-Ltl.html#t:MonadModal"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:IsAbstractOutput\">IsAbstractOutput</a> o","name":"IsAbstractOutput","module":"Cooked.Output","link":"Cooked-Output.html#t:IsAbstractOutput"},{"display_html":"<span class=\"keyword\">type family</span> <a href=\"#t:OwnerType\">OwnerType</a> o","name":"OwnerType","module":"Cooked.Output","link":"Cooked-Output.html#t:OwnerType"},{"display_html":"<span class=\"keyword\">type family</span> <a href=\"#t:DatumType\">DatumType</a> o","name":"DatumType","module":"Cooked.Output","link":"Cooked-Output.html#t:DatumType"},{"display_html":"<span class=\"keyword\">type family</span> <a href=\"#t:ValueType\">ValueType</a> o","name":"ValueType","module":"Cooked.Output","link":"Cooked-Output.html#t:ValueType"},{"display_html":"<span class=\"keyword\">type family</span> <a href=\"#t:ReferenceScriptType\">ReferenceScriptType</a> o","name":"ReferenceScriptType","module":"Cooked.Output","link":"Cooked-Output.html#t:ReferenceScriptType"},{"display_html":"<a href=\"#v:outputOwnerL\">outputOwnerL</a> :: <a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> o =&gt; Lens' o (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> o)","name":"outputOwnerL","module":"Cooked.Output","link":"Cooked-Output.html#v:outputOwnerL"},{"display_html":"<a href=\"#v:outputStakingCredentialL\">outputStakingCredentialL</a> :: <a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> o =&gt; Lens' o (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> StakingCredential)","name":"outputStakingCredentialL","module":"Cooked.Output","link":"Cooked-Output.html#v:outputStakingCredentialL"},{"display_html":"<a href=\"#v:outputDatumL\">outputDatumL</a> :: <a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> o =&gt; Lens' o (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> o)","name":"outputDatumL","module":"Cooked.Output","link":"Cooked-Output.html#v:outputDatumL"},{"display_html":"<a href=\"#v:outputValueL\">outputValueL</a> :: <a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> o =&gt; Lens' o (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> o)","name":"outputValueL","module":"Cooked.Output","link":"Cooked-Output.html#v:outputValueL"},{"display_html":"<a href=\"#v:outputReferenceScriptL\">outputReferenceScriptL</a> :: <a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> o =&gt; Lens' o (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> o))","name":"outputReferenceScriptL","module":"Cooked.Output","link":"Cooked-Output.html#v:outputReferenceScriptL"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:ToCredential\">ToCredential</a> a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:toCredential\">toCredential</a> :: a -&gt; Credential</li></ul>","name":"ToCredential toCredential","module":"Cooked.Output","link":"Cooked-Output.html#t:ToCredential"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:ToOutputDatum\">ToOutputDatum</a> a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:toOutputDatum\">toOutputDatum</a> :: a -&gt; OutputDatum</li></ul>","name":"ToOutputDatum toOutputDatum","module":"Cooked.Output","link":"Cooked-Output.html#t:ToOutputDatum"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:ToValue\">ToValue</a> a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:toValue\">toValue</a> :: a -&gt; Value</li></ul>","name":"ToValue toValue","module":"Cooked.Output","link":"Cooked-Output.html#t:ToValue"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:ToScript\">ToScript</a> a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:toScript\">toScript</a> :: a -&gt; Versioned Script</li></ul>","name":"ToScript toScript","module":"Cooked.Output","link":"Cooked-Output.html#t:ToScript"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:ToScriptHash\">ToScriptHash</a> a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:toScriptHash\">toScriptHash</a> :: a -&gt; ScriptHash</li></ul>","name":"ToScriptHash toScriptHash","module":"Cooked.Output","link":"Cooked-Output.html#t:ToScriptHash"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:IsTxInfoOutput\">IsTxInfoOutput</a> o = (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> o, <a href=\"Cooked-Output.html#t:ToCredential\" title=\"Cooked.Output\">ToCredential</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> o), <a href=\"Cooked-Output.html#t:ToOutputDatum\" title=\"Cooked.Output\">ToOutputDatum</a> (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> o), <a href=\"Cooked-Output.html#t:ToValue\" title=\"Cooked.Output\">ToValue</a> (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> o), <a href=\"Cooked-Output.html#t:ToScriptHash\" title=\"Cooked.Output\">ToScriptHash</a> (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> o))","name":"IsTxInfoOutput","module":"Cooked.Output","link":"Cooked-Output.html#t:IsTxInfoOutput"},{"display_html":"<a href=\"#v:outputAddress\">outputAddress</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> o, <a href=\"Cooked-Output.html#t:ToCredential\" title=\"Cooked.Output\">ToCredential</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> o)) =&gt; o -&gt; Address","name":"outputAddress","module":"Cooked.Output","link":"Cooked-Output.html#v:outputAddress"},{"display_html":"<a href=\"#v:outputOutputDatum\">outputOutputDatum</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> o, <a href=\"Cooked-Output.html#t:ToOutputDatum\" title=\"Cooked.Output\">ToOutputDatum</a> (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> o)) =&gt; o -&gt; OutputDatum","name":"outputOutputDatum","module":"Cooked.Output","link":"Cooked-Output.html#v:outputOutputDatum"},{"display_html":"<a href=\"#v:outputValue\">outputValue</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> o, <a href=\"Cooked-Output.html#t:ToValue\" title=\"Cooked.Output\">ToValue</a> (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> o)) =&gt; o -&gt; Value","name":"outputValue","module":"Cooked.Output","link":"Cooked-Output.html#v:outputValue"},{"display_html":"<a href=\"#v:outputReferenceScriptHash\">outputReferenceScriptHash</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> o, <a href=\"Cooked-Output.html#t:ToScriptHash\" title=\"Cooked.Output\">ToScriptHash</a> (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> o)) =&gt; o -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> ScriptHash","name":"outputReferenceScriptHash","module":"Cooked.Output","link":"Cooked-Output.html#v:outputReferenceScriptHash"},{"display_html":"<a href=\"#v:outputTxOut\">outputTxOut</a> :: <a href=\"Cooked-Output.html#t:IsTxInfoOutput\" title=\"Cooked.Output\">IsTxInfoOutput</a> o =&gt; o -&gt; TxOut","name":"outputTxOut","module":"Cooked.Output","link":"Cooked-Output.html#v:outputTxOut"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ConcreteOutput\">ConcreteOutput</a> ownerType datumType valueType referenceScriptType <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:ConcreteOutput\">ConcreteOutput</a> :: ownerType -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> StakingCredential -&gt; valueType -&gt; datumType -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> referenceScriptType -&gt; <a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> ownerType datumType valueType referenceScriptType</li></ul>","name":"ConcreteOutput ConcreteOutput","module":"Cooked.Output","link":"Cooked-Output.html#t:ConcreteOutput"},{"display_html":"<a href=\"#v:toOutputWithReferenceScriptHash\">toOutputWithReferenceScriptHash</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> output, <a href=\"Cooked-Output.html#t:ToScriptHash\" title=\"Cooked.Output\">ToScriptHash</a> (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> output)) =&gt; output -&gt; <a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> output) (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> output) (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> output) ScriptHash","name":"toOutputWithReferenceScriptHash","module":"Cooked.Output","link":"Cooked-Output.html#v:toOutputWithReferenceScriptHash"},{"display_html":"<a href=\"#v:isOutputWithoutDatum\">isOutputWithoutDatum</a> :: <a href=\"Cooked-Output.html#t:IsTxInfoOutput\" title=\"Cooked.Output\">IsTxInfoOutput</a> output =&gt; output -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> output) () (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> output) (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> output))","name":"isOutputWithoutDatum","module":"Cooked.Output","link":"Cooked-Output.html#v:isOutputWithoutDatum"},{"display_html":"<a href=\"#v:isOutputWithInlineDatum\">isOutputWithInlineDatum</a> :: <a href=\"Cooked-Output.html#t:IsTxInfoOutput\" title=\"Cooked.Output\">IsTxInfoOutput</a> output =&gt; output -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> output) Datum (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> output) (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> output))","name":"isOutputWithInlineDatum","module":"Cooked.Output","link":"Cooked-Output.html#v:isOutputWithInlineDatum"},{"display_html":"<a href=\"#v:isOutputWithDatumHash\">isOutputWithDatumHash</a> :: <a href=\"Cooked-Output.html#t:IsTxInfoOutput\" title=\"Cooked.Output\">IsTxInfoOutput</a> output =&gt; output -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> output) DatumHash (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> output) (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> output))","name":"isOutputWithDatumHash","module":"Cooked.Output","link":"Cooked-Output.html#v:isOutputWithDatumHash"},{"display_html":"<a href=\"#v:isOutputWithInlineDatumOfType\">isOutputWithInlineDatumOfType</a> :: (FromData a, <a href=\"Cooked-Output.html#t:IsTxInfoOutput\" title=\"Cooked.Output\">IsTxInfoOutput</a> output) =&gt; output -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> output) a (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> output) (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> output))","name":"isOutputWithInlineDatumOfType","module":"Cooked.Output","link":"Cooked-Output.html#v:isOutputWithInlineDatumOfType"},{"display_html":"<a href=\"#v:isScriptOutputFrom\">isScriptOutputFrom</a> :: <a href=\"Cooked-Output.html#t:IsTxInfoOutput\" title=\"Cooked.Output\">IsTxInfoOutput</a> output =&gt; TypedValidator a -&gt; output -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (TypedValidator a) (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> output) (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> output) (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> output))","name":"isScriptOutputFrom","module":"Cooked.Output","link":"Cooked-Output.html#v:isScriptOutputFrom"},{"display_html":"<a href=\"#v:isPKOutputFrom\">isPKOutputFrom</a> :: <a href=\"Cooked-Output.html#t:IsTxInfoOutput\" title=\"Cooked.Output\">IsTxInfoOutput</a> output =&gt; PubKeyHash -&gt; output -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> PubKeyHash (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> output) (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> output) (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> output))","name":"isPKOutputFrom","module":"Cooked.Output","link":"Cooked-Output.html#v:isPKOutputFrom"},{"display_html":"<a href=\"#v:isOnlyAdaOutput\">isOnlyAdaOutput</a> :: <a href=\"Cooked-Output.html#t:IsTxInfoOutput\" title=\"Cooked.Output\">IsTxInfoOutput</a> output =&gt; output -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> output) (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> output) Ada (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> output))","name":"isOnlyAdaOutput","module":"Cooked.Output","link":"Cooked-Output.html#v:isOnlyAdaOutput"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:DocCooked\">DocCooked</a> = Doc ()","name":"DocCooked","module":"Cooked.Pretty.Common","link":"Cooked-Pretty-Common.html#t:DocCooked"},{"display_html":"<a href=\"#v:renderString\">renderString</a> :: (a -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>) -&gt; a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a>","name":"renderString","module":"Cooked.Pretty.Common","link":"Cooked-Pretty-Common.html#v:renderString"},{"display_html":"<a href=\"#v:prettyItemize\">prettyItemize</a> :: <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a> -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a> -&gt; [<a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>] -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyItemize","module":"Cooked.Pretty.Common","link":"Cooked-Pretty-Common.html#v:prettyItemize"},{"display_html":"<a href=\"#v:prettyItemizeNoTitle\">prettyItemizeNoTitle</a> :: <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a> -&gt; [<a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>] -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyItemizeNoTitle","module":"Cooked.Pretty.Common","link":"Cooked-Pretty-Common.html#v:prettyItemizeNoTitle"},{"display_html":"<a href=\"#v:prettyItemizeNonEmpty\">prettyItemizeNonEmpty</a> :: <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a> -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a> -&gt; [<a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>] -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyItemizeNonEmpty","module":"Cooked.Pretty.Common","link":"Cooked-Pretty-Common.html#v:prettyItemizeNonEmpty"},{"display_html":"<a href=\"#v:prettyEnumerate\">prettyEnumerate</a> :: <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a> -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a> -&gt; [<a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>] -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyEnumerate","module":"Cooked.Pretty.Common","link":"Cooked-Pretty-Common.html#v:prettyEnumerate"},{"display_html":"<a href=\"#v:prettyHash\">prettyHash</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Int\" title=\"Distribution.Compat.Prelude.Internal\">Int</a> -&gt; a -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyHash","module":"Cooked.Pretty.Common","link":"Cooked-Pretty-Common.html#v:prettyHash"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:PrettyCookedOpts\">PrettyCookedOpts</a> = <a href=\"#v:PrettyCookedOpts\">PrettyCookedOpts</a> {<ul class=\"subs\"><li><a href=\"#v:pcOptPrintTxHashes\">pcOptPrintTxHashes</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a></li><li><a href=\"#v:pcOptPrintTxOutRefs\">pcOptPrintTxOutRefs</a> :: <a href=\"Cooked-Pretty-Options.html#t:PCOptTxOutRefs\" title=\"Cooked.Pretty.Options\">PCOptTxOutRefs</a></li><li><a href=\"#v:pcOptPrintDefaultTxOpts\">pcOptPrintDefaultTxOpts</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a></li><li><a href=\"#v:pcOptPrintedHashLength\">pcOptPrintedHashLength</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Int\" title=\"Distribution.Compat.Prelude.Internal\">Int</a></li><li><a href=\"#v:pcOptNumericUnderscores\">pcOptNumericUnderscores</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a></li></ul>}","name":"PrettyCookedOpts PrettyCookedOpts pcOptPrintTxHashes pcOptPrintTxOutRefs pcOptPrintDefaultTxOpts pcOptPrintedHashLength pcOptNumericUnderscores","module":"Cooked.Pretty.Options","link":"Cooked-Pretty-Options.html#t:PrettyCookedOpts"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:PCOptTxOutRefs\">PCOptTxOutRefs</a><ul class=\"subs\"><li>= <a href=\"#v:PCOptTxOutRefsHidden\">PCOptTxOutRefsHidden</a></li><li>| <a href=\"#v:PCOptTxOutRefsFull\">PCOptTxOutRefsFull</a></li><li>| <a href=\"#v:PCOptTxOutRefsPartial\">PCOptTxOutRefsPartial</a></li></ul>","name":"PCOptTxOutRefs PCOptTxOutRefsHidden PCOptTxOutRefsFull PCOptTxOutRefsPartial","module":"Cooked.Pretty.Options","link":"Cooked-Pretty-Options.html#t:PCOptTxOutRefs"},{"display_html":"<a href=\"#v:unsafeTypedValidatorFromUPLC\">unsafeTypedValidatorFromUPLC</a> :: <span class=\"keyword\">forall</span> a. Program NamedDeBruijn DefaultUni DefaultFun () -&gt; TypedValidator a","name":"unsafeTypedValidatorFromUPLC","module":"Cooked.RawUPLC","link":"Cooked-RawUPLC.html#v:unsafeTypedValidatorFromUPLC"},{"display_html":"<a href=\"#v:typedValidatorFromUPLC\">typedValidatorFromUPLC</a> :: Program NamedDeBruijn DefaultUni DefaultFun () -&gt; TypedValidator Any","name":"typedValidatorFromUPLC","module":"Cooked.RawUPLC","link":"Cooked-RawUPLC.html#v:typedValidatorFromUPLC"},{"display_html":"<a href=\"#v:unsafeTypedValidatorFromBS\">unsafeTypedValidatorFromBS</a> :: <span class=\"keyword\">forall</span> a. <a href=\"https://hackage.haskell.org/package/-/docs/Data-ByteString.html#t:ByteString\" title=\"Data.ByteString\">ByteString</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> (TypedValidator a)","name":"unsafeTypedValidatorFromBS","module":"Cooked.RawUPLC","link":"Cooked-RawUPLC.html#v:unsafeTypedValidatorFromBS"},{"display_html":"<a href=\"#v:typedValidatorFromBS\">typedValidatorFromBS</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-ByteString.html#t:ByteString\" title=\"Data.ByteString\">ByteString</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> (TypedValidator Any)","name":"typedValidatorFromBS","module":"Cooked.RawUPLC","link":"Cooked-RawUPLC.html#v:typedValidatorFromBS"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:ShowBS\">ShowBS</a> a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:showBS\">showBS</a> :: a -&gt; BuiltinString</li><li><a href=\"#v:showBSsPrec\">showBSsPrec</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; a -&gt; BuiltinString -&gt; BuiltinString</li></ul>","name":"ShowBS showBS showBSsPrec","module":"Cooked.ShowBS","link":"Cooked-ShowBS.html#t:ShowBS"},{"display_html":"<a href=\"#v:showBSs\">showBSs</a> :: <a href=\"Cooked-ShowBS.html#t:ShowBS\" title=\"Cooked.ShowBS\">ShowBS</a> a =&gt; a -&gt; BuiltinString -&gt; BuiltinString","name":"showBSs","module":"Cooked.ShowBS","link":"Cooked-ShowBS.html#v:showBSs"},{"display_html":"<a href=\"#v:app_prec\">app_prec</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>","name":"app_prec","module":"Cooked.ShowBS","link":"Cooked-ShowBS.html#v:app_prec"},{"display_html":"<a href=\"#v:flattenValueI\">flattenValueI</a> :: Iso' Value [(AssetClass, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>)]","name":"flattenValueI","module":"Cooked.ValueUtils","link":"Cooked-ValueUtils.html#v:flattenValueI"},{"display_html":"<a href=\"#v:positivePart\">positivePart</a> :: Value -&gt; Value","name":"positivePart","module":"Cooked.ValueUtils","link":"Cooked-ValueUtils.html#v:positivePart"},{"display_html":"<a href=\"#v:negativePart\">negativePart</a> :: Value -&gt; Value","name":"negativePart","module":"Cooked.ValueUtils","link":"Cooked-ValueUtils.html#v:negativePart"},{"display_html":"<a href=\"#v:adaL\">adaL</a> :: Lens' Value Ada","name":"adaL","module":"Cooked.ValueUtils","link":"Cooked-ValueUtils.html#v:adaL"},{"display_html":"<a href=\"#v:knownWallets\">knownWallets</a> :: [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"knownWallets","module":"Cooked.Wallet","link":"Cooked-Wallet.html#v:knownWallets"},{"display_html":"<a href=\"#v:wallet\">wallet</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Int\" title=\"Distribution.Compat.Prelude.Internal\">Int</a> -&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>","name":"wallet","module":"Cooked.Wallet","link":"Cooked-Wallet.html#v:wallet"},{"display_html":"<a href=\"#v:walletPKHashToId\">walletPKHashToId</a> :: PubKeyHash -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Int\" title=\"Distribution.Compat.Prelude.Internal\">Int</a>","name":"walletPKHashToId","module":"Cooked.Wallet","link":"Cooked-Wallet.html#v:walletPKHashToId"},{"display_html":"<a href=\"#v:walletPK\">walletPK</a> :: <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; PubKey","name":"walletPK","module":"Cooked.Wallet","link":"Cooked-Wallet.html#v:walletPK"},{"display_html":"<a href=\"#v:walletStakingPK\">walletStakingPK</a> :: <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> PubKey","name":"walletStakingPK","module":"Cooked.Wallet","link":"Cooked-Wallet.html#v:walletStakingPK"},{"display_html":"<a href=\"#v:walletPKHash\">walletPKHash</a> :: <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; PubKeyHash","name":"walletPKHash","module":"Cooked.Wallet","link":"Cooked-Wallet.html#v:walletPKHash"},{"display_html":"<a href=\"#v:walletStakingPKHash\">walletStakingPKHash</a> :: <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> PubKeyHash","name":"walletStakingPKHash","module":"Cooked.Wallet","link":"Cooked-Wallet.html#v:walletStakingPKHash"},{"display_html":"<a href=\"#v:walletAddress\">walletAddress</a> :: <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; Address","name":"walletAddress","module":"Cooked.Wallet","link":"Cooked-Wallet.html#v:walletAddress"},{"display_html":"<a href=\"#v:walletSK\">walletSK</a> :: MockWallet -&gt; <a href=\"Cooked-Wallet.html#t:PrivateKey\" title=\"Cooked.Wallet\">PrivateKey</a>","name":"walletSK","module":"Cooked.Wallet","link":"Cooked-Wallet.html#v:walletSK"},{"display_html":"<a href=\"#v:walletStakingSK\">walletStakingSK</a> :: <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"Cooked-Wallet.html#t:PrivateKey\" title=\"Cooked.Wallet\">PrivateKey</a>","name":"walletStakingSK","module":"Cooked.Wallet","link":"Cooked-Wallet.html#v:walletStakingSK"},{"display_html":"<a href=\"#v:initialDistribution\">initialDistribution</a> :: [(<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>, [Value])] -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a>","name":"initialDistribution","module":"Cooked.Wallet","link":"Cooked-Wallet.html#v:initialDistribution"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:InitialDistribution\">InitialDistribution</a> = <a href=\"#v:InitialDistribution\">InitialDistribution</a> {<ul class=\"subs\"><li><a href=\"#v:unInitialDistribution\">unInitialDistribution</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> [Value]</li></ul>}","name":"InitialDistribution InitialDistribution unInitialDistribution","module":"Cooked.Wallet","link":"Cooked-Wallet.html#t:InitialDistribution"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Wallet\">Wallet</a> = MockWallet","name":"Wallet","module":"Cooked.Wallet","link":"Cooked-Wallet.html#t:Wallet"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:PrivateKey\">PrivateKey</a> = XPrv","name":"PrivateKey","module":"Cooked.Wallet","link":"Cooked-Wallet.html#t:PrivateKey"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:PrettyCooked\">PrettyCooked</a> a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:prettyCooked\">prettyCooked</a> :: a -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a></li><li><a href=\"#v:prettyCookedOpt\">prettyCookedOpt</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; a -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a></li></ul>","name":"PrettyCooked prettyCookedOpt prettyCooked","module":"Cooked.Pretty.Class","link":"Cooked-Pretty-Class.html#t:PrettyCooked"},{"display_html":"<a href=\"#v:printCookedOpt\">printCookedOpt</a> :: <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> a =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> ()","name":"printCookedOpt","module":"Cooked.Pretty.Class","link":"Cooked-Pretty-Class.html#v:printCookedOpt"},{"display_html":"<a href=\"#v:printCooked\">printCooked</a> :: <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> a =&gt; a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> ()","name":"printCooked","module":"Cooked.Pretty.Class","link":"Cooked-Pretty-Class.html#v:printCooked"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:LabelConstrs\">LabelConstrs</a> x = (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> x, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> x, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Eq\" title=\"Distribution.Compat.Prelude.Internal\">Eq</a> x, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Ord\" title=\"Distribution.Compat.Prelude.Internal\">Ord</a> x)","name":"LabelConstrs","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:LabelConstrs"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TxLabel\">TxLabel</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:TxLabel\">TxLabel</a> :: <a href=\"Cooked-Skeleton.html#t:LabelConstrs\" title=\"Cooked.Skeleton\">LabelConstrs</a> x =&gt; x -&gt; <a href=\"Cooked-Skeleton.html#t:TxLabel\" title=\"Cooked.Skeleton\">TxLabel</a></li></ul>","name":"TxLabel TxLabel","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:TxLabel"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:BalanceOutputPolicy\">BalanceOutputPolicy</a><ul class=\"subs\"><li>= <a href=\"#v:AdjustExistingOutput\">AdjustExistingOutput</a></li><li>| <a href=\"#v:DontAdjustExistingOutput\">DontAdjustExistingOutput</a></li></ul>","name":"BalanceOutputPolicy AdjustExistingOutput DontAdjustExistingOutput","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:BalanceOutputPolicy"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:BalancingWallet\">BalancingWallet</a><ul class=\"subs\"><li>= <a href=\"#v:BalanceWithFirstSigner\">BalanceWithFirstSigner</a></li><li>| <a href=\"#v:BalanceWith\">BalanceWith</a> <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a></li></ul>","name":"BalancingWallet BalanceWithFirstSigner BalanceWith","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:BalancingWallet"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:RawModTx\">RawModTx</a> = <a href=\"#v:RawModTxAfterBalancing\">RawModTxAfterBalancing</a> (Tx BabbageEra -&gt; Tx BabbageEra)","name":"RawModTx RawModTxAfterBalancing","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:RawModTx"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:EmulatorParamsModification\">EmulatorParamsModification</a> = <a href=\"#v:EmulatorParamsModification\">EmulatorParamsModification</a> (Params -&gt; Params)","name":"EmulatorParamsModification EmulatorParamsModification","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:EmulatorParamsModification"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:BalancingUtxos\">BalancingUtxos</a><ul class=\"subs\"><li>= <a href=\"#v:BalancingUtxosAll\">BalancingUtxosAll</a></li><li>| <a href=\"#v:BalancingUtxosDatumless\">BalancingUtxosDatumless</a></li><li>| <a href=\"#v:BalancingUtxosAllowlist\">BalancingUtxosAllowlist</a> [TxOutRef]</li><li>| <a href=\"#v:BalancingUtxosBlocklist\">BalancingUtxosBlocklist</a> [TxOutRef]</li></ul>","name":"BalancingUtxos BalancingUtxosAll BalancingUtxosDatumless BalancingUtxosAllowlist BalancingUtxosBlocklist","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:BalancingUtxos"},{"display_html":"<a href=\"#v:applyEmulatorParamsModification\">applyEmulatorParamsModification</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"Cooked-Skeleton.html#t:EmulatorParamsModification\" title=\"Cooked.Skeleton\">EmulatorParamsModification</a> -&gt; Params -&gt; Params","name":"applyEmulatorParamsModification","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:applyEmulatorParamsModification"},{"display_html":"<a href=\"#v:applyRawModOnBalancedTx\">applyRawModOnBalancedTx</a> :: [<a href=\"Cooked-Skeleton.html#t:RawModTx\" title=\"Cooked.Skeleton\">RawModTx</a>] -&gt; Tx BabbageEra -&gt; Tx BabbageEra","name":"applyRawModOnBalancedTx","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:applyRawModOnBalancedTx"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TxOpts\">TxOpts</a> = <a href=\"#v:TxOpts\">TxOpts</a> {<ul class=\"subs\"><li><a href=\"#v:txOptEnsureMinAda\">txOptEnsureMinAda</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a></li><li><a href=\"#v:txOptAwaitTxConfirmed\">txOptAwaitTxConfirmed</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a></li><li><a href=\"#v:txOptAutoSlotIncrease\">txOptAutoSlotIncrease</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a></li><li><a href=\"#v:txOptUnsafeModTx\">txOptUnsafeModTx</a> :: [<a href=\"Cooked-Skeleton.html#t:RawModTx\" title=\"Cooked.Skeleton\">RawModTx</a>]</li><li><a href=\"#v:txOptBalance\">txOptBalance</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a></li><li><a href=\"#v:txOptBalanceOutputPolicy\">txOptBalanceOutputPolicy</a> :: <a href=\"Cooked-Skeleton.html#t:BalanceOutputPolicy\" title=\"Cooked.Skeleton\">BalanceOutputPolicy</a></li><li><a href=\"#v:txOptBalanceWallet\">txOptBalanceWallet</a> :: <a href=\"Cooked-Skeleton.html#t:BalancingWallet\" title=\"Cooked.Skeleton\">BalancingWallet</a></li><li><a href=\"#v:txOptBalancingUtxos\">txOptBalancingUtxos</a> :: <a href=\"Cooked-Skeleton.html#t:BalancingUtxos\" title=\"Cooked.Skeleton\">BalancingUtxos</a></li><li><a href=\"#v:txOptEmulatorParamsModification\">txOptEmulatorParamsModification</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"Cooked-Skeleton.html#t:EmulatorParamsModification\" title=\"Cooked.Skeleton\">EmulatorParamsModification</a></li></ul>}","name":"TxOpts TxOpts txOptEmulatorParamsModification txOptEnsureMinAda txOptAwaitTxConfirmed txOptAutoSlotIncrease txOptUnsafeModTx txOptBalance txOptBalanceOutputPolicy txOptBalanceWallet txOptBalancingUtxos","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:TxOpts"},{"display_html":"<a href=\"#v:txOptEnsureMinAdaL\">txOptEnsureMinAdaL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxOpts\" title=\"Cooked.Skeleton\">TxOpts</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"txOptEnsureMinAdaL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txOptEnsureMinAdaL"},{"display_html":"<a href=\"#v:txOptAwaitTxConfirmedL\">txOptAwaitTxConfirmedL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxOpts\" title=\"Cooked.Skeleton\">TxOpts</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"txOptAwaitTxConfirmedL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txOptAwaitTxConfirmedL"},{"display_html":"<a href=\"#v:txOptAutoSlotIncreaseL\">txOptAutoSlotIncreaseL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxOpts\" title=\"Cooked.Skeleton\">TxOpts</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"txOptAutoSlotIncreaseL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txOptAutoSlotIncreaseL"},{"display_html":"<a href=\"#v:txOptUnsafeModTxL\">txOptUnsafeModTxL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxOpts\" title=\"Cooked.Skeleton\">TxOpts</a> [<a href=\"Cooked-Skeleton.html#t:RawModTx\" title=\"Cooked.Skeleton\">RawModTx</a>]","name":"txOptUnsafeModTxL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txOptUnsafeModTxL"},{"display_html":"<a href=\"#v:txOptBalanceL\">txOptBalanceL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxOpts\" title=\"Cooked.Skeleton\">TxOpts</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"txOptBalanceL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txOptBalanceL"},{"display_html":"<a href=\"#v:txOptBalanceOutputPolicyL\">txOptBalanceOutputPolicyL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxOpts\" title=\"Cooked.Skeleton\">TxOpts</a> <a href=\"Cooked-Skeleton.html#t:BalanceOutputPolicy\" title=\"Cooked.Skeleton\">BalanceOutputPolicy</a>","name":"txOptBalanceOutputPolicyL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txOptBalanceOutputPolicyL"},{"display_html":"<a href=\"#v:txOptBalanceWalletL\">txOptBalanceWalletL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxOpts\" title=\"Cooked.Skeleton\">TxOpts</a> <a href=\"Cooked-Skeleton.html#t:BalancingWallet\" title=\"Cooked.Skeleton\">BalancingWallet</a>","name":"txOptBalanceWalletL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txOptBalanceWalletL"},{"display_html":"<a href=\"#v:txOptBalancingUtxosL\">txOptBalancingUtxosL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxOpts\" title=\"Cooked.Skeleton\">TxOpts</a> <a href=\"Cooked-Skeleton.html#t:BalancingUtxos\" title=\"Cooked.Skeleton\">BalancingUtxos</a>","name":"txOptBalancingUtxosL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txOptBalancingUtxosL"},{"display_html":"<a href=\"#v:txOptEmulatorParamsModificationL\">txOptEmulatorParamsModificationL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxOpts\" title=\"Cooked.Skeleton\">TxOpts</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"Cooked-Skeleton.html#t:EmulatorParamsModification\" title=\"Cooked.Skeleton\">EmulatorParamsModification</a>)","name":"txOptEmulatorParamsModificationL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txOptEmulatorParamsModificationL"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:MintsConstrs\">MintsConstrs</a> redeemer = (ToData redeemer, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> redeemer, <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> redeemer, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> redeemer)","name":"MintsConstrs","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:MintsConstrs"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MintsRedeemer\">MintsRedeemer</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:NoMintsRedeemer\">NoMintsRedeemer</a> :: <a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a></li><li><a href=\"#v:SomeMintsRedeemer\">SomeMintsRedeemer</a> :: <a href=\"Cooked-Skeleton.html#t:MintsConstrs\" title=\"Cooked.Skeleton\">MintsConstrs</a> redeemer =&gt; redeemer -&gt; <a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a></li></ul>","name":"MintsRedeemer NoMintsRedeemer SomeMintsRedeemer","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:MintsRedeemer"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:TxSkelMints\">TxSkelMints</a> = <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> (Versioned MintingPolicy) (<a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a>, NEMap TokenName (NonZero <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>))","name":"TxSkelMints","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:TxSkelMints"},{"display_html":"<a href=\"#v:addToTxSkelMints\">addToTxSkelMints</a> :: (Versioned MintingPolicy, <a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a>, TokenName, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>) -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelMints\" title=\"Cooked.Skeleton\">TxSkelMints</a> -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelMints\" title=\"Cooked.Skeleton\">TxSkelMints</a>","name":"addToTxSkelMints","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:addToTxSkelMints"},{"display_html":"<a href=\"#v:txSkelMintsToList\">txSkelMintsToList</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkelMints\" title=\"Cooked.Skeleton\">TxSkelMints</a> -&gt; [(Versioned MintingPolicy, <a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a>, TokenName, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>)]","name":"txSkelMintsToList","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelMintsToList"},{"display_html":"<a href=\"#v:txSkelMintsFromList\">txSkelMintsFromList</a> :: [(Versioned MintingPolicy, <a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a>, TokenName, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>)] -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelMints\" title=\"Cooked.Skeleton\">TxSkelMints</a>","name":"txSkelMintsFromList","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelMintsFromList"},{"display_html":"<a href=\"#v:txSkelMintsValue\">txSkelMintsValue</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkelMints\" title=\"Cooked.Skeleton\">TxSkelMints</a> -&gt; Value","name":"txSkelMintsValue","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelMintsValue"},{"display_html":"<a href=\"#v:txSkelOutValueL\">txSkelOutValueL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> Value","name":"txSkelOutValueL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutValueL"},{"display_html":"<a href=\"#v:txSkelOutDatumL\">txSkelOutDatumL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a>","name":"txSkelOutDatumL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutDatumL"},{"display_html":"<a href=\"#v:txSkelOutValue\">txSkelOutValue</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; Value","name":"txSkelOutValue","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutValue"},{"display_html":"<a href=\"#v:txSkelOutValidator\">txSkelOutValidator</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (Versioned Validator)","name":"txSkelOutValidator","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutValidator"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:TxSkelOutDatumConstrs\">TxSkelOutDatumConstrs</a> a = (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a, <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> a, ToData a, Eq a, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a)","name":"TxSkelOutDatumConstrs","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:TxSkelOutDatumConstrs"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TxSkelOutDatum\">TxSkelOutDatum</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:TxSkelOutNoDatum\">TxSkelOutNoDatum</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a></li><li><a href=\"#v:TxSkelOutDatumHash\">TxSkelOutDatumHash</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatumConstrs\" title=\"Cooked.Skeleton\">TxSkelOutDatumConstrs</a> a =&gt; a -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a></li><li><a href=\"#v:TxSkelOutDatum\">TxSkelOutDatum</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatumConstrs\" title=\"Cooked.Skeleton\">TxSkelOutDatumConstrs</a> a =&gt; a -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a></li><li><a href=\"#v:TxSkelOutInlineDatum\">TxSkelOutInlineDatum</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatumConstrs\" title=\"Cooked.Skeleton\">TxSkelOutDatumConstrs</a> a =&gt; a -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a></li></ul>","name":"TxSkelOutDatum TxSkelOutDatum TxSkelOutNoDatum TxSkelOutDatumHash TxSkelOutInlineDatum","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:TxSkelOutDatum"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TxSkelOut\">TxSkelOut</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Pays\">Pays</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> o, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> o, <a href=\"Cooked-Output.html#t:IsTxInfoOutput\" title=\"Cooked.Output\">IsTxInfoOutput</a> o, IsTxSkelOutAllowedOwner (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> o), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> o), <a href=\"Cooked-Output.html#t:ToCredential\" title=\"Cooked.Output\">ToCredential</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> o), <a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> o ~ <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a>, <a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> o ~ Value, <a href=\"Cooked-Output.html#t:ToScript\" title=\"Cooked.Output\">ToScript</a> (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> o), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> o), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> o), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> o)) =&gt; {..} -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a></li></ul>","name":"TxSkelOut Pays producedOutput","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:TxSkelOut"},{"display_html":"<a href=\"#v:txSkelOutTypedDatum\">txSkelOutTypedDatum</a> :: FromData a =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> a","name":"txSkelOutTypedDatum","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutTypedDatum"},{"display_html":"<a href=\"#v:txSkelOutUntypedDatum\">txSkelOutUntypedDatum</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> Datum","name":"txSkelOutUntypedDatum","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutUntypedDatum"},{"display_html":"<a href=\"#v:paysPK\">paysPK</a> :: PubKeyHash -&gt; Value -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>","name":"paysPK","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:paysPK"},{"display_html":"<a href=\"#v:paysScript\">paysScript</a> :: (ToData (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> (DatumType a), Eq (DatumType a), <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a) =&gt; TypedValidator a -&gt; DatumType a -&gt; Value -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>","name":"paysScript","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:paysScript"},{"display_html":"<a href=\"#v:paysScriptInlineDatum\">paysScriptInlineDatum</a> :: (ToData (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> (DatumType a), Eq (DatumType a), <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a) =&gt; TypedValidator a -&gt; DatumType a -&gt; Value -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>","name":"paysScriptInlineDatum","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:paysScriptInlineDatum"},{"display_html":"<a href=\"#v:paysScriptDatumHash\">paysScriptDatumHash</a> :: (ToData (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> (DatumType a), Eq (DatumType a), <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a) =&gt; TypedValidator a -&gt; DatumType a -&gt; Value -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>","name":"paysScriptDatumHash","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:paysScriptDatumHash"},{"display_html":"<a href=\"#v:paysScriptNoDatum\">paysScriptNoDatum</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a =&gt; TypedValidator a -&gt; Value -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>","name":"paysScriptNoDatum","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:paysScriptNoDatum"},{"display_html":"<a href=\"#v:withDatum\">withDatum</a> :: (ToData a, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a, Eq a, <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> a) =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; a -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>","name":"withDatum","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:withDatum"},{"display_html":"<a href=\"#v:withInlineDatum\">withInlineDatum</a> :: (ToData a, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a, Eq a, <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> a) =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; a -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>","name":"withInlineDatum","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:withInlineDatum"},{"display_html":"<a href=\"#v:withDatumHash\">withDatumHash</a> :: (ToData a, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a, Eq a, <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> a) =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; a -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>","name":"withDatumHash","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:withDatumHash"},{"display_html":"<a href=\"#v:withReferenceScript\">withReferenceScript</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> script, <a href=\"Cooked-Output.html#t:ToScript\" title=\"Cooked.Output\">ToScript</a> script, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> script, <a href=\"Cooked-Output.html#t:ToScriptHash\" title=\"Cooked.Output\">ToScriptHash</a> script) =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; script -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>","name":"withReferenceScript","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:withReferenceScript"},{"display_html":"<a href=\"#v:withStakingCredential\">withStakingCredential</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; StakingCredential -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>","name":"withStakingCredential","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:withStakingCredential"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TxSkelRedeemer\">TxSkelRedeemer</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:TxSkelNoRedeemerForPK\">TxSkelNoRedeemerForPK</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a></li><li><a href=\"#v:TxSkelRedeemerForScript\">TxSkelRedeemerForScript</a> :: SpendsScriptConstrs redeemer =&gt; redeemer -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a></li><li><a href=\"#v:TxSkelRedeemerForReferencedScript\">TxSkelRedeemerForReferencedScript</a> :: SpendsScriptConstrs redeemer =&gt; TxOutRef -&gt; redeemer -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a></li></ul>","name":"TxSkelRedeemer TxSkelNoRedeemerForPK TxSkelRedeemerForScript TxSkelRedeemerForReferencedScript","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:TxSkelRedeemer"},{"display_html":"<a href=\"#v:txSkelTypedRedeemer\">txSkelTypedRedeemer</a> :: FromData (RedeemerType a) =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (RedeemerType a)","name":"txSkelTypedRedeemer","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelTypedRedeemer"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TxSkel\">TxSkel</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:TxSkel\">TxSkel</a> :: {..} -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a></li></ul>","name":"TxSkel TxSkel txSkelLabel txSkelOpts txSkelMints txSkelSigners txSkelValidityRange txSkelIns txSkelInsReference txSkelOuts","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:TxSkel"},{"display_html":"<a href=\"#v:txSkelLabelL\">txSkelLabelL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Set\" title=\"Distribution.Compat.Prelude.Internal\">Set</a> <a href=\"Cooked-Skeleton.html#t:TxLabel\" title=\"Cooked.Skeleton\">TxLabel</a>)","name":"txSkelLabelL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelLabelL"},{"display_html":"<a href=\"#v:txSkelOptsL\">txSkelOptsL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> <a href=\"Cooked-Skeleton.html#t:TxOpts\" title=\"Cooked.Skeleton\">TxOpts</a>","name":"txSkelOptsL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOptsL"},{"display_html":"<a href=\"#v:txSkelMintsL\">txSkelMintsL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> <a href=\"Cooked-Skeleton.html#t:TxSkelMints\" title=\"Cooked.Skeleton\">TxSkelMints</a>","name":"txSkelMintsL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelMintsL"},{"display_html":"<a href=\"#v:txSkelValidityRangeL\">txSkelValidityRangeL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> SlotRange","name":"txSkelValidityRangeL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelValidityRangeL"},{"display_html":"<a href=\"#v:txSkelSignersL\">txSkelSignersL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"txSkelSignersL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelSignersL"},{"display_html":"<a href=\"#v:txSkelInsL\">txSkelInsL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> TxOutRef <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a>)","name":"txSkelInsL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelInsL"},{"display_html":"<a href=\"#v:txSkelInsReferenceL\">txSkelInsReferenceL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Set\" title=\"Distribution.Compat.Prelude.Internal\">Set</a> TxOutRef)","name":"txSkelInsReferenceL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelInsReferenceL"},{"display_html":"<a href=\"#v:txSkelOutsL\">txSkelOutsL</a> :: Lens' <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> [<a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>]","name":"txSkelOutsL","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutsL"},{"display_html":"<a href=\"#v:txSkelTemplate\">txSkelTemplate</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a>","name":"txSkelTemplate","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelTemplate"},{"display_html":"<a href=\"#v:txSkelOutputData\">txSkelOutputData</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> DatumHash <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a>","name":"txSkelOutputData","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutputData"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Fee\">Fee</a> = <a href=\"#v:Fee\">Fee</a> {<ul class=\"subs\"><li><a href=\"#v:feeLovelace\">feeLovelace</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a></li></ul>}","name":"Fee Fee feeLovelace","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:Fee"},{"display_html":"<a href=\"#v:txSkelOutputValue\">txSkelOutputValue</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; <a href=\"Cooked-Skeleton.html#t:Fee\" title=\"Cooked.Skeleton\">Fee</a> -&gt; Value","name":"txSkelOutputValue","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutputValue"},{"display_html":"<a href=\"#v:txSkelOutValidators\">txSkelOutValidators</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> ValidatorHash (Versioned Validator)","name":"txSkelOutValidators","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutValidators"},{"display_html":"<a href=\"#v:txSkelOutOwnerTypeP\">txSkelOutOwnerTypeP</a> :: <span class=\"keyword\">forall</span> ownerType. (<a href=\"Cooked-Output.html#t:ToCredential\" title=\"Cooked.Output\">ToCredential</a> ownerType, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> ownerType, IsTxSkelOutAllowedOwner ownerType, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> ownerType) =&gt; Prism' <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> ownerType <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> Value (Versioned Script))","name":"txSkelOutOwnerTypeP","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutOwnerTypeP"},{"display_html":"<a href=\"#v:txSkelOutputDatumTypeAT\">txSkelOutputDatumTypeAT</a> :: (FromData a, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a) =&gt; AffineTraversal' <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> a","name":"txSkelOutputDatumTypeAT","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutputDatumTypeAT"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:SkelContext\">SkelContext</a> = <a href=\"#v:SkelContext\">SkelContext</a> {<ul class=\"subs\"><li><a href=\"#v:skelContextTxOuts\">skelContextTxOuts</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> TxOutRef TxOut</li><li><a href=\"#v:skelContextTxSkelOutDatums\">skelContextTxSkelOutDatums</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> DatumHash <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a></li></ul>}","name":"SkelContext SkelContext skelContextTxOuts skelContextTxSkelOutDatums","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#t:SkelContext"},{"display_html":"<a href=\"#v:txSkelOutReferenceScripts\">txSkelOutReferenceScripts</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> ValidatorHash (Versioned Validator)","name":"txSkelOutReferenceScripts","module":"Cooked.Skeleton","link":"Cooked-Skeleton.html#v:txSkelOutReferenceScripts"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:UtxoState\">UtxoState</a> = <a href=\"#v:UtxoState\">UtxoState</a> {<ul class=\"subs\"><li><a href=\"#v:utxoState\">utxoState</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> Address <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoPayloadSet\" title=\"Cooked.MockChain.UtxoState\">UtxoPayloadSet</a></li></ul>}","name":"UtxoState UtxoState utxoState","module":"Cooked.MockChain.UtxoState","link":"Cooked-MockChain-UtxoState.html#t:UtxoState"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:UtxoPayloadSet\">UtxoPayloadSet</a> = <a href=\"#v:UtxoPayloadSet\">UtxoPayloadSet</a> {<ul class=\"subs\"><li><a href=\"#v:utxoPayloadSet\">utxoPayloadSet</a> :: [<a href=\"Cooked-MockChain-UtxoState.html#t:UtxoPayload\" title=\"Cooked.MockChain.UtxoState\">UtxoPayload</a>]</li></ul>}","name":"UtxoPayloadSet UtxoPayloadSet utxoPayloadSet","module":"Cooked.MockChain.UtxoState","link":"Cooked-MockChain-UtxoState.html#t:UtxoPayloadSet"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:UtxoPayload\">UtxoPayload</a> = <a href=\"#v:UtxoPayload\">UtxoPayload</a> {<ul class=\"subs\"><li><a href=\"#v:utxoPayloadTxOutRef\">utxoPayloadTxOutRef</a> :: TxOutRef</li><li><a href=\"#v:utxoPayloadValue\">utxoPayloadValue</a> :: Value</li><li><a href=\"#v:utxoPayloadSkelOutDatum\">utxoPayloadSkelOutDatum</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a></li><li><a href=\"#v:utxoPayloadReferenceScript\">utxoPayloadReferenceScript</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> ScriptHash</li></ul>}","name":"UtxoPayload UtxoPayload utxoPayloadTxOutRef utxoPayloadValue utxoPayloadSkelOutDatum utxoPayloadReferenceScript","module":"Cooked.MockChain.UtxoState","link":"Cooked-MockChain-UtxoState.html#t:UtxoPayload"},{"display_html":"<a href=\"#v:holdsInState\">holdsInState</a> :: Address -&gt; <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a> -&gt; Value","name":"holdsInState","module":"Cooked.MockChain.UtxoState","link":"Cooked-MockChain-UtxoState.html#v:holdsInState"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:GenerateTxError\">GenerateTxError</a><ul class=\"subs\"><li>= <a href=\"#v:ToCardanoError\">ToCardanoError</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> ToCardanoError</li><li>| <a href=\"#v:TxBodyError\">TxBodyError</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> TxBodyError</li><li>| <a href=\"#v:GenerateTxErrorGeneral\">GenerateTxErrorGeneral</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a></li></ul>","name":"GenerateTxError TxBodyError ToCardanoError GenerateTxErrorGeneral","module":"Cooked.MockChain.GenerateTx","link":"Cooked-MockChain-GenerateTx.html#t:GenerateTxError"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:GenTxParams\">GenTxParams</a>","name":"GenTxParams gtpCollateralIns gtpFee","module":"Cooked.MockChain.GenerateTx","link":"Cooked-MockChain-GenerateTx.html#t:GenTxParams"},{"display_html":"<a href=\"#v:generateTxBodyContent\">generateTxBodyContent</a> :: <a href=\"Cooked-MockChain-GenerateTx.html#t:GenTxParams\" title=\"Cooked.MockChain.GenerateTx\">GenTxParams</a> -&gt; Params -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> DatumHash Datum -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> TxOutRef TxOut -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> ValidatorHash (Versioned Validator) -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-GenerateTx.html#t:GenerateTxError\" title=\"Cooked.MockChain.GenerateTx\">GenerateTxError</a> (TxBodyContent BuildTx BabbageEra)","name":"generateTxBodyContent","module":"Cooked.MockChain.GenerateTx","link":"Cooked-MockChain-GenerateTx.html#v:generateTxBodyContent"},{"display_html":"<a href=\"#v:txSkelOutToCardanoTxOut\">txSkelOutToCardanoTxOut</a> :: Params -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-GenerateTx.html#t:GenerateTxError\" title=\"Cooked.MockChain.GenerateTx\">GenerateTxError</a> (TxOut CtxTx BabbageEra)","name":"txSkelOutToCardanoTxOut","module":"Cooked.MockChain.GenerateTx","link":"Cooked-MockChain-GenerateTx.html#v:txSkelOutToCardanoTxOut"},{"display_html":"<a href=\"#v:generateTx\">generateTx</a> :: <a href=\"Cooked-MockChain-GenerateTx.html#t:GenTxParams\" title=\"Cooked.MockChain.GenerateTx\">GenTxParams</a> -&gt; Params -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> DatumHash Datum -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> TxOutRef TxOut -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> ValidatorHash (Versioned Validator) -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-GenerateTx.html#t:GenerateTxError\" title=\"Cooked.MockChain.GenerateTx\">GenerateTxError</a> (Tx BabbageEra)","name":"generateTx","module":"Cooked.MockChain.GenerateTx","link":"Cooked-MockChain-GenerateTx.html#v:generateTx"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MockChainError\">MockChainError</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:MCEValidationError\">MCEValidationError</a> :: ValidationErrorInPhase -&gt; <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a></li><li><a href=\"#v:MCEUnbalanceable\">MCEUnbalanceable</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MCEUnbalanceableError\" title=\"Cooked.MockChain.BlockChain\">MCEUnbalanceableError</a> -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a></li><li><a href=\"#v:MCENoSuitableCollateral\">MCENoSuitableCollateral</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a></li><li><a href=\"#v:MCEGenerationError\">MCEGenerationError</a> :: <a href=\"Cooked-MockChain-GenerateTx.html#t:GenerateTxError\" title=\"Cooked.MockChain.GenerateTx\">GenerateTxError</a> -&gt; <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a></li><li><a href=\"#v:MCECalcFee\">MCECalcFee</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> -&gt; <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a></li><li><a href=\"#v:MCEUnknownOutRefError\">MCEUnknownOutRefError</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; TxOutRef -&gt; <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a></li><li><a href=\"#v:MCEUnknownValidator\">MCEUnknownValidator</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; ValidatorHash -&gt; <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a></li><li><a href=\"#v:MCEUnknownDatum\">MCEUnknownDatum</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; DatumHash -&gt; <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a></li><li><a href=\"#v:FailWith\">FailWith</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a></li><li><a href=\"#v:OtherMockChainError\">OtherMockChainError</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> err, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Eq\" title=\"Distribution.Compat.Prelude.Internal\">Eq</a> err) =&gt; err -&gt; <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a></li></ul>","name":"MockChainError MCEValidationError MCEUnbalanceable MCENoSuitableCollateral MCEGenerationError MCECalcFee MCEUnknownOutRefError MCEUnknownValidator MCEUnknownDatum FailWith OtherMockChainError","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#t:MockChainError"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MCEUnbalanceableError\">MCEUnbalanceableError</a><ul class=\"subs\"><li>= <a href=\"#v:MCEUnbalNotEnoughFunds\">MCEUnbalNotEnoughFunds</a> <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> Value</li><li>| <a href=\"#v:MCEUnbalNotEnoughReturning\">MCEUnbalNotEnoughReturning</a> (Value, [TxOutRef]) (Value, [TxOutRef]) Value</li></ul>","name":"MCEUnbalanceableError MCEUnbalNotEnoughFunds MCEUnbalNotEnoughReturning","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#t:MCEUnbalanceableError"},{"display_html":"<span class=\"keyword\">class</span> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:MonadFail\" title=\"Distribution.Compat.Prelude.Internal\">MonadFail</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Error-Class.html#t:MonadError\" title=\"Control.Monad.Error.Class\">MonadError</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> m) =&gt; <a href=\"#t:MonadBlockChainBalancing\">MonadBlockChainBalancing</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:getParams\">getParams</a> :: m Params</li><li><a href=\"#v:utxosAtLedger\">utxosAtLedger</a> :: Address -&gt; m [(TxOutRef, TxOut)]</li><li><a href=\"#v:datumFromHash\">datumFromHash</a> :: DatumHash -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> Datum)</li><li><a href=\"#v:validatorFromHash\">validatorFromHash</a> :: ValidatorHash -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (Versioned Validator))</li><li><a href=\"#v:txOutByRefLedger\">txOutByRefLedger</a> :: TxOutRef -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> TxOut)</li></ul>","name":"MonadBlockChainBalancing getParams datumFromHash utxosAtLedger validatorFromHash txOutByRefLedger","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m =&gt; <a href=\"#t:MonadBlockChainWithoutValidation\">MonadBlockChainWithoutValidation</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:allUtxosLedger\">allUtxosLedger</a> :: m [(TxOutRef, TxOut)]</li><li><a href=\"#v:currentSlot\">currentSlot</a> :: m Slot</li><li><a href=\"#v:awaitSlot\">awaitSlot</a> :: Slot -&gt; m Slot</li></ul>","name":"MonadBlockChainWithoutValidation awaitSlot currentSlot allUtxosLedger","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; <a href=\"#t:MonadBlockChain\">MonadBlockChain</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:validateTxSkel\">validateTxSkel</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; m CardanoTx</li></ul>","name":"MonadBlockChain validateTxSkel","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#t:MonadBlockChain"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:AsTrans\">AsTrans</a> t (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) a = <a href=\"#v:AsTrans\">AsTrans</a> {<ul class=\"subs\"><li><a href=\"#v:getTrans\">getTrans</a> :: t m a</li></ul>}","name":"AsTrans AsTrans getTrans","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#t:AsTrans"},{"display_html":"<a href=\"#v:allUtxos\">allUtxos</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; m [(TxOutRef, TxOut)]","name":"allUtxos","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:allUtxos"},{"display_html":"<a href=\"#v:currentTime\">currentTime</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; m (POSIXTime, POSIXTime)","name":"currentTime","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:currentTime"},{"display_html":"<a href=\"#v:waitNSlots\">waitNSlots</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; m Slot","name":"waitNSlots","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:waitNSlots"},{"display_html":"<a href=\"#v:utxosAt\">utxosAt</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m =&gt; Address -&gt; m [(TxOutRef, TxOut)]","name":"utxosAt","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:utxosAt"},{"display_html":"<a href=\"#v:txOutByRef\">txOutByRef</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m =&gt; TxOutRef -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> TxOut)","name":"txOutByRef","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:txOutByRef"},{"display_html":"<a href=\"#v:utxosFromCardanoTx\">utxosFromCardanoTx</a> :: CardanoTx -&gt; [(TxOutRef, TxOut)]","name":"utxosFromCardanoTx","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:utxosFromCardanoTx"},{"display_html":"<a href=\"#v:txOutV2FromLedger\">txOutV2FromLedger</a> :: TxOut -&gt; TxOut","name":"txOutV2FromLedger","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:txOutV2FromLedger"},{"display_html":"<a href=\"#v:typedDatumFromTxOutRef\">typedDatumFromTxOutRef</a> :: (FromData a, <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m) =&gt; TxOutRef -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> a)","name":"typedDatumFromTxOutRef","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:typedDatumFromTxOutRef"},{"display_html":"<a href=\"#v:valueFromTxOutRef\">valueFromTxOutRef</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; TxOutRef -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> Value)","name":"valueFromTxOutRef","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:valueFromTxOutRef"},{"display_html":"<a href=\"#v:outputDatumFromTxOutRef\">outputDatumFromTxOutRef</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; TxOutRef -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> OutputDatum)","name":"outputDatumFromTxOutRef","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:outputDatumFromTxOutRef"},{"display_html":"<a href=\"#v:datumFromTxOutRef\">datumFromTxOutRef</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; TxOutRef -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> Datum)","name":"datumFromTxOutRef","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:datumFromTxOutRef"},{"display_html":"<a href=\"#v:resolveDatum\">resolveDatum</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> out, <a href=\"Cooked-Output.html#t:ToOutputDatum\" title=\"Cooked.Output\">ToOutputDatum</a> (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> out), <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m) =&gt; out -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> out) Datum (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> out) (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> out)))","name":"resolveDatum","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:resolveDatum"},{"display_html":"<a href=\"#v:resolveTypedDatum\">resolveTypedDatum</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> out, <a href=\"Cooked-Output.html#t:ToOutputDatum\" title=\"Cooked.Output\">ToOutputDatum</a> (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> out), <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m, FromData a) =&gt; out -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> out) a (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> out) (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> out)))","name":"resolveTypedDatum","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:resolveTypedDatum"},{"display_html":"<a href=\"#v:resolveValidator\">resolveValidator</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> out, <a href=\"Cooked-Output.html#t:ToCredential\" title=\"Cooked.Output\">ToCredential</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> out), <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m) =&gt; out -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (Versioned Validator) (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> out) (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> out) (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> out)))","name":"resolveValidator","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:resolveValidator"},{"display_html":"<a href=\"#v:resolveReferenceScript\">resolveReferenceScript</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> out, <a href=\"Cooked-Output.html#t:ToScriptHash\" title=\"Cooked.Output\">ToScriptHash</a> (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> out), <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m) =&gt; out -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> out) (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> out) (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> out) (Versioned Validator)))","name":"resolveReferenceScript","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:resolveReferenceScript"},{"display_html":"<a href=\"#v:getEnclosingSlot\">getEnclosingSlot</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; POSIXTime -&gt; m Slot","name":"getEnclosingSlot","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:getEnclosingSlot"},{"display_html":"<a href=\"#v:awaitEnclosingSlot\">awaitEnclosingSlot</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; POSIXTime -&gt; m Slot","name":"awaitEnclosingSlot","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:awaitEnclosingSlot"},{"display_html":"<a href=\"#v:slotRangeBefore\">slotRangeBefore</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; POSIXTime -&gt; m SlotRange","name":"slotRangeBefore","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:slotRangeBefore"},{"display_html":"<a href=\"#v:slotRangeAfter\">slotRangeAfter</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; POSIXTime -&gt; m SlotRange","name":"slotRangeAfter","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:slotRangeAfter"},{"display_html":"<a href=\"#v:slotToTimeInterval\">slotToTimeInterval</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; Slot -&gt; m (POSIXTime, POSIXTime)","name":"slotToTimeInterval","module":"Cooked.MockChain.BlockChain","link":"Cooked-MockChain-BlockChain.html#v:slotToTimeInterval"},{"display_html":"<a href=\"#v:runTweakInChain\">runTweakInChain</a> :: (<a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:MonadPlus\" title=\"Distribution.Compat.Prelude.Internal\">MonadPlus</a> m) =&gt; <a href=\"Cooked-Tweak-Common.html#t:Tweak\" title=\"Cooked.Tweak.Common\">Tweak</a> m a -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; m (a, <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a>)","name":"runTweakInChain","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:runTweakInChain"},{"display_html":"<a href=\"#v:runTweakInChain-39-\">runTweakInChain'</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m =&gt; <a href=\"Cooked-Tweak-Common.html#t:Tweak\" title=\"Cooked.Tweak.Common\">Tweak</a> m a -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; m [(a, <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a>)]","name":"runTweakInChain'","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:runTweakInChain-39-"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Tweak\">Tweak</a> m = <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Lazy.html#t:StateT\" title=\"Control.Monad.State.Lazy\">StateT</a> <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> (ListT m)","name":"Tweak","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#t:Tweak"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:UntypedTweak\">UntypedTweak</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:UntypedTweak\">UntypedTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:Tweak\" title=\"Cooked.Tweak.Common\">Tweak</a> m a -&gt; <a href=\"Cooked-Tweak-Common.html#t:UntypedTweak\" title=\"Cooked.Tweak.Common\">UntypedTweak</a> m</li></ul>","name":"UntypedTweak UntypedTweak","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#t:UntypedTweak"},{"display_html":"<span class=\"keyword\">class</span> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:MonadPlus\" title=\"Distribution.Compat.Prelude.Internal\">MonadPlus</a> m, <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m) =&gt; <a href=\"#t:MonadTweak\">MonadTweak</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:getTxSkel\">getTxSkel</a> :: m <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a></li><li><a href=\"#v:putTxSkel\">putTxSkel</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; m ()</li></ul>","name":"MonadTweak getTxSkel putTxSkel","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#t:MonadTweak"},{"display_html":"<a href=\"#v:failingTweak\">failingTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; m a","name":"failingTweak","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:failingTweak"},{"display_html":"<a href=\"#v:doNothingTweak\">doNothingTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; m ()","name":"doNothingTweak","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:doNothingTweak"},{"display_html":"<a href=\"#v:viewTweak\">viewTweak</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, Is k A_Getter) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; m a","name":"viewTweak","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:viewTweak"},{"display_html":"<a href=\"#v:viewAllTweak\">viewAllTweak</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, Is k A_Fold) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; m [a]","name":"viewAllTweak","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:viewAllTweak"},{"display_html":"<a href=\"#v:setTweak\">setTweak</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, Is k A_Setter) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; a -&gt; m ()","name":"setTweak","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:setTweak"},{"display_html":"<a href=\"#v:overTweak\">overTweak</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, Is k A_Setter) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; (a -&gt; a) -&gt; m ()","name":"overTweak","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:overTweak"},{"display_html":"<a href=\"#v:overMaybeTweak\">overMaybeTweak</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, Is k A_Traversal) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> a) -&gt; m [a]","name":"overMaybeTweak","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:overMaybeTweak"},{"display_html":"<a href=\"#v:overMaybeSelectingTweak\">overMaybeSelectingTweak</a> :: <span class=\"keyword\">forall</span> a m k is. (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, Is k A_Traversal) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> a) -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m [a]","name":"overMaybeSelectingTweak","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:overMaybeSelectingTweak"},{"display_html":"<a href=\"#v:selectP\">selectP</a> :: (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; Prism' a a","name":"selectP","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:selectP"},{"display_html":"<a href=\"#v:combineModsTweak\">combineModsTweak</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Eq\" title=\"Distribution.Compat.Prelude.Internal\">Eq</a> is, Is k A_Traversal, <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m) =&gt; ([is] -&gt; [[is]]) -&gt; Optic' k (WithIx is) <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> x -&gt; (is -&gt; x -&gt; m [(x, l)]) -&gt; m [l]","name":"combineModsTweak","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:combineModsTweak"},{"display_html":"<a href=\"#v:iviewTweak\">iviewTweak</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, Is k A_Getter) =&gt; Optic' k (WithIx is) <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; m (is, a)","name":"iviewTweak","module":"Cooked.Tweak.Common","link":"Cooked-Tweak-Common.html#v:iviewTweak"},{"display_html":"<a href=\"#v:getSignersTweak\">getSignersTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"getSignersTweak","module":"Cooked.Tweak.Signers","link":"Cooked-Tweak-Signers.html#v:getSignersTweak"},{"display_html":"<a href=\"#v:modifySignersTweak\">modifySignersTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; ([<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>] -&gt; [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]) -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"modifySignersTweak","module":"Cooked.Tweak.Signers","link":"Cooked-Tweak-Signers.html#v:modifySignersTweak"},{"display_html":"<a href=\"#v:setSignersTweak\">setSignersTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>] -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"setSignersTweak","module":"Cooked.Tweak.Signers","link":"Cooked-Tweak-Signers.html#v:setSignersTweak"},{"display_html":"<a href=\"#v:signersSatisfyTweak\">signersSatisfyTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; ([<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>] -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"signersSatisfyTweak","module":"Cooked.Tweak.Signers","link":"Cooked-Tweak-Signers.html#v:signersSatisfyTweak"},{"display_html":"<a href=\"#v:isSignerTweak\">isSignerTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"isSignerTweak","module":"Cooked.Tweak.Signers","link":"Cooked-Tweak-Signers.html#v:isSignerTweak"},{"display_html":"<a href=\"#v:hasSignersTweak\">hasSignersTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"hasSignersTweak","module":"Cooked.Tweak.Signers","link":"Cooked-Tweak-Signers.html#v:hasSignersTweak"},{"display_html":"<a href=\"#v:addFirstSignerTweak\">addFirstSignerTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"addFirstSignerTweak","module":"Cooked.Tweak.Signers","link":"Cooked-Tweak-Signers.html#v:addFirstSignerTweak"},{"display_html":"<a href=\"#v:addSignersTweak\">addSignersTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>] -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"addSignersTweak","module":"Cooked.Tweak.Signers","link":"Cooked-Tweak-Signers.html#v:addSignersTweak"},{"display_html":"<a href=\"#v:addLastSignerTweak\">addLastSignerTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"addLastSignerTweak","module":"Cooked.Tweak.Signers","link":"Cooked-Tweak-Signers.html#v:addLastSignerTweak"},{"display_html":"<a href=\"#v:removeSignersTweak\">removeSignersTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>] -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"removeSignersTweak","module":"Cooked.Tweak.Signers","link":"Cooked-Tweak-Signers.html#v:removeSignersTweak"},{"display_html":"<a href=\"#v:removeSignerTweak\">removeSignerTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"removeSignerTweak","module":"Cooked.Tweak.Signers","link":"Cooked-Tweak-Signers.html#v:removeSignerTweak"},{"display_html":"<a href=\"#v:replaceFirstSignerTweak\">replaceFirstSignerTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"replaceFirstSignerTweak","module":"Cooked.Tweak.Signers","link":"Cooked-Tweak-Signers.html#v:replaceFirstSignerTweak"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:PermutOutTweakMode\">PermutOutTweakMode</a><ul class=\"subs\"><li>= <a href=\"#v:KeepIdentity\">KeepIdentity</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Int\" title=\"Distribution.Compat.Prelude.Internal\">Int</a>)</li><li>| <a href=\"#v:OmitIdentity\">OmitIdentity</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Int\" title=\"Distribution.Compat.Prelude.Internal\">Int</a>)</li></ul>","name":"PermutOutTweakMode KeepIdentity OmitIdentity","module":"Cooked.Tweak.OutPermutations","link":"Cooked-Tweak-OutPermutations.html#t:PermutOutTweakMode"},{"display_html":"<a href=\"#v:allOutPermutsTweak\">allOutPermutsTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; <a href=\"Cooked-Tweak-OutPermutations.html#t:PermutOutTweakMode\" title=\"Cooked.Tweak.OutPermutations\">PermutOutTweakMode</a> -&gt; m ()","name":"allOutPermutsTweak","module":"Cooked.Tweak.OutPermutations","link":"Cooked-Tweak-OutPermutations.html#v:allOutPermutsTweak"},{"display_html":"<a href=\"#v:singleOutPermutTweak\">singleOutPermutTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Int\" title=\"Distribution.Compat.Prelude.Internal\">Int</a> -&gt; m ()","name":"singleOutPermutTweak","module":"Cooked.Tweak.OutPermutations","link":"Cooked-Tweak-OutPermutations.html#v:singleOutPermutTweak"},{"display_html":"<a href=\"#v:distinctPermutations\">distinctPermutations</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Eq\" title=\"Distribution.Compat.Prelude.Internal\">Eq</a> a =&gt; [a] -&gt; [[a]]","name":"distinctPermutations","module":"Cooked.Tweak.OutPermutations","link":"Cooked-Tweak-OutPermutations.html#v:distinctPermutations"},{"display_html":"<a href=\"#v:addLabelTweak\">addLabelTweak</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, <a href=\"Cooked-Skeleton.html#t:LabelConstrs\" title=\"Cooked.Skeleton\">LabelConstrs</a> x) =&gt; x -&gt; m ()","name":"addLabelTweak","module":"Cooked.Tweak.Labels","link":"Cooked-Tweak-Labels.html#v:addLabelTweak"},{"display_html":"<a href=\"#v:removeLabelTweak\">removeLabelTweak</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, <a href=\"Cooked-Skeleton.html#t:LabelConstrs\" title=\"Cooked.Skeleton\">LabelConstrs</a> x) =&gt; x -&gt; m ()","name":"removeLabelTweak","module":"Cooked.Tweak.Labels","link":"Cooked-Tweak-Labels.html#v:removeLabelTweak"},{"display_html":"<a href=\"#v:hasLabelTweak\">hasLabelTweak</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, <a href=\"Cooked-Skeleton.html#t:LabelConstrs\" title=\"Cooked.Skeleton\">LabelConstrs</a> x) =&gt; x -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"hasLabelTweak","module":"Cooked.Tweak.Labels","link":"Cooked-Tweak-Labels.html#v:hasLabelTweak"},{"display_html":"<a href=\"#v:tamperDatumTweak\">tamperDatumTweak</a> :: <span class=\"keyword\">forall</span> a m. (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a, <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> a, ToData a, FromData a, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a) =&gt; (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> a) -&gt; m [a]","name":"tamperDatumTweak","module":"Cooked.Tweak.TamperDatum","link":"Cooked-Tweak-TamperDatum.html#v:tamperDatumTweak"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TamperDatumLbl\">TamperDatumLbl</a> = <a href=\"#v:TamperDatumLbl\">TamperDatumLbl</a>","name":"TamperDatumLbl TamperDatumLbl","module":"Cooked.Tweak.TamperDatum","link":"Cooked-Tweak-TamperDatum.html#t:TamperDatumLbl"},{"display_html":"<a href=\"#v:malformDatumTweak\">malformDatumTweak</a> :: <span class=\"keyword\">forall</span> a m. (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, ToData a, FromData a, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a) =&gt; (a -&gt; [BuiltinData]) -&gt; m ()","name":"malformDatumTweak","module":"Cooked.Tweak.TamperDatum","link":"Cooked-Tweak-TamperDatum.html#v:malformDatumTweak"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MalformDatumLbl\">MalformDatumLbl</a> = <a href=\"#v:MalformDatumLbl\">MalformDatumLbl</a>","name":"MalformDatumLbl MalformDatumLbl","module":"Cooked.Tweak.TamperDatum","link":"Cooked-Tweak-TamperDatum.html#t:MalformDatumLbl"},{"display_html":"<a href=\"#v:ensureInputTweak\">ensureInputTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; TxOutRef -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a> -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (TxOutRef, <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a>))","name":"ensureInputTweak","module":"Cooked.Tweak.AddInputsAndOutputs","link":"Cooked-Tweak-AddInputsAndOutputs.html#v:ensureInputTweak"},{"display_html":"<a href=\"#v:addInputTweak\">addInputTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; TxOutRef -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a> -&gt; m ()","name":"addInputTweak","module":"Cooked.Tweak.AddInputsAndOutputs","link":"Cooked-Tweak-AddInputsAndOutputs.html#v:addInputTweak"},{"display_html":"<a href=\"#v:removeInputTweak\">removeInputTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; (TxOutRef -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m [(TxOutRef, <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a>)]","name":"removeInputTweak","module":"Cooked.Tweak.AddInputsAndOutputs","link":"Cooked-Tweak-AddInputsAndOutputs.html#v:removeInputTweak"},{"display_html":"<a href=\"#v:ensureOutputTweak\">ensureOutputTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>)","name":"ensureOutputTweak","module":"Cooked.Tweak.AddInputsAndOutputs","link":"Cooked-Tweak-AddInputsAndOutputs.html#v:ensureOutputTweak"},{"display_html":"<a href=\"#v:addOutputTweak\">addOutputTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; m ()","name":"addOutputTweak","module":"Cooked.Tweak.AddInputsAndOutputs","link":"Cooked-Tweak-AddInputsAndOutputs.html#v:addOutputTweak"},{"display_html":"<a href=\"#v:removeOutputTweak\">removeOutputTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; (<a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m [<a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>]","name":"removeOutputTweak","module":"Cooked.Tweak.AddInputsAndOutputs","link":"Cooked-Tweak-AddInputsAndOutputs.html#v:removeOutputTweak"},{"display_html":"<a href=\"#v:addMintTweak\">addMintTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; (Versioned MintingPolicy, <a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a>, TokenName, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>) -&gt; m ()","name":"addMintTweak","module":"Cooked.Tweak.AddInputsAndOutputs","link":"Cooked-Tweak-AddInputsAndOutputs.html#v:addMintTweak"},{"display_html":"<a href=\"#v:removeMintTweak\">removeMintTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; ((Versioned MintingPolicy, <a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a>, TokenName, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m [(Versioned MintingPolicy, <a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a>, TokenName, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>)]","name":"removeMintTweak","module":"Cooked.Tweak.AddInputsAndOutputs","link":"Cooked-Tweak-AddInputsAndOutputs.html#v:removeMintTweak"},{"display_html":"<span class=\"keyword\">class</span> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:MonadPlus\" title=\"Distribution.Compat.Prelude.Internal\">MonadPlus</a> m, <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainWithoutValidation</a> m) =&gt; <a href=\"#t:MonadTweak\">MonadTweak</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:getTxSkel\">getTxSkel</a> :: m <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a></li><li><a href=\"#v:putTxSkel\">putTxSkel</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; m ()</li></ul>","name":"MonadTweak getTxSkel putTxSkel","module":"Cooked.Tweak","link":"Cooked-Tweak.html#t:MonadTweak"},{"display_html":"<a href=\"#v:failingTweak\">failingTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; m a","name":"failingTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:failingTweak"},{"display_html":"<a href=\"#v:doNothingTweak\">doNothingTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; m ()","name":"doNothingTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:doNothingTweak"},{"display_html":"<a href=\"#v:viewTweak\">viewTweak</a> :: (<a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m, Is k A_Getter) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; m a","name":"viewTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:viewTweak"},{"display_html":"<a href=\"#v:iviewTweak\">iviewTweak</a> :: (<a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m, Is k A_Getter) =&gt; Optic' k (WithIx is) <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; m (is, a)","name":"iviewTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:iviewTweak"},{"display_html":"<a href=\"#v:viewAllTweak\">viewAllTweak</a> :: (<a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m, Is k A_Fold) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; m [a]","name":"viewAllTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:viewAllTweak"},{"display_html":"<a href=\"#v:setTweak\">setTweak</a> :: (<a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m, Is k A_Setter) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; a -&gt; m ()","name":"setTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:setTweak"},{"display_html":"<a href=\"#v:overTweak\">overTweak</a> :: (<a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m, Is k A_Setter) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; (a -&gt; a) -&gt; m ()","name":"overTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:overTweak"},{"display_html":"<a href=\"#v:overMaybeTweak\">overMaybeTweak</a> :: (<a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m, Is k A_Traversal) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> a) -&gt; m [a]","name":"overMaybeTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:overMaybeTweak"},{"display_html":"<a href=\"#v:overMaybeSelectingTweak\">overMaybeSelectingTweak</a> :: <span class=\"keyword\">forall</span> a m k is. (<a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m, Is k A_Traversal) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> a) -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m [a]","name":"overMaybeSelectingTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:overMaybeSelectingTweak"},{"display_html":"<a href=\"#v:combineModsTweak\">combineModsTweak</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Eq\" title=\"Distribution.Compat.Prelude.Internal\">Eq</a> is, Is k A_Traversal, <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m) =&gt; ([is] -&gt; [[is]]) -&gt; Optic' k (WithIx is) <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> x -&gt; (is -&gt; x -&gt; m [(x, l)]) -&gt; m [l]","name":"combineModsTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:combineModsTweak"},{"display_html":"<a href=\"#v:selectP\">selectP</a> :: (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; Prism' a a","name":"selectP","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:selectP"},{"display_html":"<a href=\"#v:getSignersTweak\">getSignersTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"getSignersTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:getSignersTweak"},{"display_html":"<a href=\"#v:modifySignersTweak\">modifySignersTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; ([<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>] -&gt; [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]) -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"modifySignersTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:modifySignersTweak"},{"display_html":"<a href=\"#v:setSignersTweak\">setSignersTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>] -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"setSignersTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:setSignersTweak"},{"display_html":"<a href=\"#v:signersSatisfyTweak\">signersSatisfyTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; ([<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>] -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"signersSatisfyTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:signersSatisfyTweak"},{"display_html":"<a href=\"#v:isSignerTweak\">isSignerTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"isSignerTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:isSignerTweak"},{"display_html":"<a href=\"#v:hasSignersTweak\">hasSignersTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"hasSignersTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:hasSignersTweak"},{"display_html":"<a href=\"#v:addFirstSignerTweak\">addFirstSignerTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"addFirstSignerTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:addFirstSignerTweak"},{"display_html":"<a href=\"#v:addSignersTweak\">addSignersTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>] -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"addSignersTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:addSignersTweak"},{"display_html":"<a href=\"#v:addLastSignerTweak\">addLastSignerTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"addLastSignerTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:addLastSignerTweak"},{"display_html":"<a href=\"#v:removeSignersTweak\">removeSignersTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>] -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"removeSignersTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:removeSignersTweak"},{"display_html":"<a href=\"#v:removeSignerTweak\">removeSignerTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"removeSignerTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:removeSignerTweak"},{"display_html":"<a href=\"#v:replaceFirstSignerTweak\">replaceFirstSignerTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>]","name":"replaceFirstSignerTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:replaceFirstSignerTweak"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:PermutOutTweakMode\">PermutOutTweakMode</a><ul class=\"subs\"><li>= <a href=\"#v:KeepIdentity\">KeepIdentity</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Int\" title=\"Distribution.Compat.Prelude.Internal\">Int</a>)</li><li>| <a href=\"#v:OmitIdentity\">OmitIdentity</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Int\" title=\"Distribution.Compat.Prelude.Internal\">Int</a>)</li></ul>","name":"PermutOutTweakMode KeepIdentity OmitIdentity","module":"Cooked.Tweak","link":"Cooked-Tweak.html#t:PermutOutTweakMode"},{"display_html":"<a href=\"#v:allOutPermutsTweak\">allOutPermutsTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; <a href=\"Cooked-Tweak.html#t:PermutOutTweakMode\" title=\"Cooked.Tweak\">PermutOutTweakMode</a> -&gt; m ()","name":"allOutPermutsTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:allOutPermutsTweak"},{"display_html":"<a href=\"#v:singleOutPermutTweak\">singleOutPermutTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Int\" title=\"Distribution.Compat.Prelude.Internal\">Int</a> -&gt; m ()","name":"singleOutPermutTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:singleOutPermutTweak"},{"display_html":"<a href=\"#v:addLabelTweak\">addLabelTweak</a> :: (<a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m, <a href=\"Cooked-Skeleton.html#t:LabelConstrs\" title=\"Cooked.Skeleton\">LabelConstrs</a> x) =&gt; x -&gt; m ()","name":"addLabelTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:addLabelTweak"},{"display_html":"<a href=\"#v:removeLabelTweak\">removeLabelTweak</a> :: (<a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m, <a href=\"Cooked-Skeleton.html#t:LabelConstrs\" title=\"Cooked.Skeleton\">LabelConstrs</a> x) =&gt; x -&gt; m ()","name":"removeLabelTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:removeLabelTweak"},{"display_html":"<a href=\"#v:hasLabelTweak\">hasLabelTweak</a> :: (<a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m, <a href=\"Cooked-Skeleton.html#t:LabelConstrs\" title=\"Cooked.Skeleton\">LabelConstrs</a> x) =&gt; x -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"hasLabelTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:hasLabelTweak"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MalformDatumLbl\">MalformDatumLbl</a> = <a href=\"#v:MalformDatumLbl\">MalformDatumLbl</a>","name":"MalformDatumLbl MalformDatumLbl","module":"Cooked.Tweak","link":"Cooked-Tweak.html#t:MalformDatumLbl"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TamperDatumLbl\">TamperDatumLbl</a> = <a href=\"#v:TamperDatumLbl\">TamperDatumLbl</a>","name":"TamperDatumLbl TamperDatumLbl","module":"Cooked.Tweak","link":"Cooked-Tweak.html#t:TamperDatumLbl"},{"display_html":"<a href=\"#v:tamperDatumTweak\">tamperDatumTweak</a> :: <span class=\"keyword\">forall</span> a m. (<a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a, <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> a, ToData a, FromData a, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a) =&gt; (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> a) -&gt; m [a]","name":"tamperDatumTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:tamperDatumTweak"},{"display_html":"<a href=\"#v:malformDatumTweak\">malformDatumTweak</a> :: <span class=\"keyword\">forall</span> a m. (<a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m, ToData a, FromData a, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a) =&gt; (a -&gt; [BuiltinData]) -&gt; m ()","name":"malformDatumTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:malformDatumTweak"},{"display_html":"<a href=\"#v:ensureInputTweak\">ensureInputTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; TxOutRef -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a> -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (TxOutRef, <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a>))","name":"ensureInputTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:ensureInputTweak"},{"display_html":"<a href=\"#v:addInputTweak\">addInputTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; TxOutRef -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a> -&gt; m ()","name":"addInputTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:addInputTweak"},{"display_html":"<a href=\"#v:removeInputTweak\">removeInputTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; (TxOutRef -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m [(TxOutRef, <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a>)]","name":"removeInputTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:removeInputTweak"},{"display_html":"<a href=\"#v:ensureOutputTweak\">ensureOutputTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>)","name":"ensureOutputTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:ensureOutputTweak"},{"display_html":"<a href=\"#v:addOutputTweak\">addOutputTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; m ()","name":"addOutputTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:addOutputTweak"},{"display_html":"<a href=\"#v:removeOutputTweak\">removeOutputTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; (<a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m [<a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>]","name":"removeOutputTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:removeOutputTweak"},{"display_html":"<a href=\"#v:addMintTweak\">addMintTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; (Versioned MintingPolicy, <a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a>, TokenName, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>) -&gt; m ()","name":"addMintTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:addMintTweak"},{"display_html":"<a href=\"#v:removeMintTweak\">removeMintTweak</a> :: <a href=\"Cooked-Tweak.html#t:MonadTweak\" title=\"Cooked.Tweak\">MonadTweak</a> m =&gt; ((Versioned MintingPolicy, <a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a>, TokenName, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m [(Versioned MintingPolicy, <a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a>, TokenName, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>)]","name":"removeMintTweak","module":"Cooked.Tweak","link":"Cooked-Tweak.html#v:removeMintTweak"},{"display_html":"<a href=\"#v:redirectScriptOutputTweak\">redirectScriptOutputTweak</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, Is k A_Traversal, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> (DatumType a), ToData (DatumType a)) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (TypedValidator a) <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> Value (Versioned Script)) -&gt; (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (TypedValidator a) <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> Value (Versioned Script) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (TypedValidator a)) -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m [<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (TypedValidator a) <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> Value (Versioned Script)]","name":"redirectScriptOutputTweak","module":"Cooked.Attack.DatumHijacking","link":"Cooked-Attack-DatumHijacking.html#v:redirectScriptOutputTweak"},{"display_html":"<a href=\"#v:datumHijackingAttack\">datumHijackingAttack</a> :: <span class=\"keyword\">forall</span> a m. (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> (DatumType a), <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> (DatumType a), ToData (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a) =&gt; (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (TypedValidator a) <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> Value (Versioned Script) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m [<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (TypedValidator a) <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> Value (Versioned Script)]","name":"datumHijackingAttack","module":"Cooked.Attack.DatumHijacking","link":"Cooked-Attack-DatumHijacking.html#v:datumHijackingAttack"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:DatumHijackingLbl\">DatumHijackingLbl</a> = <a href=\"#v:DatumHijackingLbl\">DatumHijackingLbl</a> Address","name":"DatumHijackingLbl DatumHijackingLbl","module":"Cooked.Attack.DatumHijacking","link":"Cooked-Attack-DatumHijacking.html#t:DatumHijackingLbl"},{"display_html":"<a href=\"#v:datumHijackingTarget\">datumHijackingTarget</a> :: TypedValidator a","name":"datumHijackingTarget","module":"Cooked.Attack.DatumHijacking","link":"Cooked-Attack-DatumHijacking.html#v:datumHijackingTarget"},{"display_html":"<a href=\"#v:runUtxoSearch\">runUtxoSearch</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; UtxoSearch m a -&gt; m [(TxOutRef, a)]","name":"runUtxoSearch","module":"Cooked.MockChain.UtxoSearch","link":"Cooked-MockChain-UtxoSearch.html#v:runUtxoSearch"},{"display_html":"<a href=\"#v:allUtxosSearch\">allUtxosSearch</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChain\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChain</a> m =&gt; UtxoSearch m TxOut","name":"allUtxosSearch","module":"Cooked.MockChain.UtxoSearch","link":"Cooked-MockChain-UtxoSearch.html#v:allUtxosSearch"},{"display_html":"<a href=\"#v:allUtxosLedgerSearch\">allUtxosLedgerSearch</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChain\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChain</a> m =&gt; UtxoSearch m TxOut","name":"allUtxosLedgerSearch","module":"Cooked.MockChain.UtxoSearch","link":"Cooked-MockChain-UtxoSearch.html#v:allUtxosLedgerSearch"},{"display_html":"<a href=\"#v:utxosAtSearch\">utxosAtSearch</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m =&gt; Address -&gt; UtxoSearch m TxOut","name":"utxosAtSearch","module":"Cooked.MockChain.UtxoSearch","link":"Cooked-MockChain-UtxoSearch.html#v:utxosAtSearch"},{"display_html":"<a href=\"#v:utxosAtLedgerSearch\">utxosAtLedgerSearch</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m =&gt; Address -&gt; UtxoSearch m TxOut","name":"utxosAtLedgerSearch","module":"Cooked.MockChain.UtxoSearch","link":"Cooked-MockChain-UtxoSearch.html#v:utxosAtLedgerSearch"},{"display_html":"<a href=\"#v:utxosFromCardanoTxSearch\">utxosFromCardanoTxSearch</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; CardanoTx -&gt; UtxoSearch m TxOut","name":"utxosFromCardanoTxSearch","module":"Cooked.MockChain.UtxoSearch","link":"Cooked-MockChain-UtxoSearch.html#v:utxosFromCardanoTxSearch"},{"display_html":"<a href=\"#v:txOutByRefSearch\">txOutByRefSearch</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m =&gt; [TxOutRef] -&gt; UtxoSearch m TxOut","name":"txOutByRefSearch","module":"Cooked.MockChain.UtxoSearch","link":"Cooked-MockChain-UtxoSearch.html#v:txOutByRefSearch"},{"display_html":"<a href=\"#v:filterWith\">filterWith</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; UtxoSearch m a -&gt; (a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> b)) -&gt; UtxoSearch m b","name":"filterWith","module":"Cooked.MockChain.UtxoSearch","link":"Cooked-MockChain-UtxoSearch.html#v:filterWith"},{"display_html":"<a href=\"#v:filterWithPure\">filterWithPure</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; UtxoSearch m a -&gt; (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> b) -&gt; UtxoSearch m b","name":"filterWithPure","module":"Cooked.MockChain.UtxoSearch","link":"Cooked-MockChain-UtxoSearch.html#v:filterWithPure"},{"display_html":"<a href=\"#v:filterWithOptic\">filterWithOptic</a> :: (Is k An_AffineFold, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m) =&gt; UtxoSearch m a -&gt; Optic' k is a b -&gt; UtxoSearch m b","name":"filterWithOptic","module":"Cooked.MockChain.UtxoSearch","link":"Cooked-MockChain-UtxoSearch.html#v:filterWithOptic"},{"display_html":"<a href=\"#v:filterWithPred\">filterWithPred</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; UtxoSearch m a -&gt; (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; UtxoSearch m a","name":"filterWithPred","module":"Cooked.MockChain.UtxoSearch","link":"Cooked-MockChain-UtxoSearch.html#v:filterWithPred"},{"display_html":"<a href=\"#v:balancedTxSkel\">balancedTxSkel</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; m (<a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a>, <a href=\"Cooked-Skeleton.html#t:Fee\" title=\"Cooked.Skeleton\">Fee</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Set\" title=\"Distribution.Compat.Prelude.Internal\">Set</a> TxOutRef)","name":"balancedTxSkel","module":"Cooked.MockChain.Balancing","link":"Cooked-MockChain-Balancing.html#v:balancedTxSkel"},{"display_html":"<a href=\"#v:balancedTx\">balancedTx</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m =&gt; (<a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a>, <a href=\"Cooked-Skeleton.html#t:Fee\" title=\"Cooked.Skeleton\">Fee</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Set\" title=\"Distribution.Compat.Prelude.Internal\">Set</a> TxOutRef) -&gt; m (Tx BabbageEra)","name":"balancedTx","module":"Cooked.MockChain.Balancing","link":"Cooked-MockChain-Balancing.html#v:balancedTx"},{"display_html":"<a href=\"#v:txSkelInputData\">txSkelInputData</a> :: <a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChainBalancing</a> m =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> DatumHash Datum)","name":"txSkelInputData","module":"Cooked.MockChain.Balancing","link":"Cooked-MockChain-Balancing.html#v:txSkelInputData"},{"display_html":"<a href=\"#v:mcstToUtxoState\">mcstToUtxoState</a> :: <a href=\"Cooked-MockChain-Direct.html#t:MockChainSt\" title=\"Cooked.MockChain.Direct\">MockChainSt</a> -&gt; <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a>","name":"mcstToUtxoState","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:mcstToUtxoState"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MockChainSt\">MockChainSt</a> = <a href=\"#v:MockChainSt\">MockChainSt</a> {<ul class=\"subs\"><li><a href=\"#v:mcstIndex\">mcstIndex</a> :: UtxoIndex</li><li><a href=\"#v:mcstDatums\">mcstDatums</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> DatumHash (<a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>)</li><li><a href=\"#v:mcstValidators\">mcstValidators</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> ValidatorHash (Versioned Validator)</li><li><a href=\"#v:mcstCurrentSlot\">mcstCurrentSlot</a> :: Slot</li></ul>}","name":"MockChainSt MockChainSt mcstCurrentSlot mcstValidators mcstDatums mcstIndex","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#t:MockChainSt"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:MockChainEnv\">MockChainEnv</a> = <a href=\"#v:MockChainEnv\">MockChainEnv</a> {<ul class=\"subs\"><li><a href=\"#v:mceParams\">mceParams</a> :: Params</li></ul>}","name":"MockChainEnv MockChainEnv mceParams","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#t:MockChainEnv"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:MockChainT\">MockChainT</a> m a = <a href=\"#v:MockChainT\">MockChainT</a> {<ul class=\"subs\"><li><a href=\"#v:unMockChain\">unMockChain</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Reader.html#t:ReaderT\" title=\"Control.Monad.Reader\">ReaderT</a> <a href=\"Cooked-MockChain-Direct.html#t:MockChainEnv\" title=\"Cooked.MockChain.Direct\">MockChainEnv</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Strict.html#t:StateT\" title=\"Control.Monad.State.Strict\">StateT</a> <a href=\"Cooked-MockChain-Direct.html#t:MockChainSt\" title=\"Cooked.MockChain.Direct\">MockChainSt</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Except.html#t:ExceptT\" title=\"Control.Monad.Except\">ExceptT</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> m)) a</li></ul>}","name":"MockChainT MockChainT unMockChain","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#t:MockChainT"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:MockChain\">MockChain</a> = <a href=\"Cooked-MockChain-Direct.html#t:MockChainT\" title=\"Cooked.MockChain.Direct\">MockChainT</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Identity\" title=\"Distribution.Compat.Prelude.Internal\">Identity</a>","name":"MockChain","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#t:MockChain"},{"display_html":"<a href=\"#v:combineMockChainT\">combineMockChainT</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; (<span class=\"keyword\">forall</span> a. m a -&gt; m a -&gt; m a) -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainT\" title=\"Cooked.MockChain.Direct\">MockChainT</a> m x -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainT\" title=\"Cooked.MockChain.Direct\">MockChainT</a> m x -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainT\" title=\"Cooked.MockChain.Direct\">MockChainT</a> m x","name":"combineMockChainT","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:combineMockChainT"},{"display_html":"<a href=\"#v:mapMockChainT\">mapMockChainT</a> :: (m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain-Direct.html#t:MockChainSt\" title=\"Cooked.MockChain.Direct\">MockChainSt</a>)) -&gt; n (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (b, <a href=\"Cooked-MockChain-Direct.html#t:MockChainSt\" title=\"Cooked.MockChain.Direct\">MockChainSt</a>))) -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainT\" title=\"Cooked.MockChain.Direct\">MockChainT</a> m a -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainT\" title=\"Cooked.MockChain.Direct\">MockChainT</a> n b","name":"mapMockChainT","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:mapMockChainT"},{"display_html":"<a href=\"#v:runMockChainTRaw\">runMockChainTRaw</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainEnv\" title=\"Cooked.MockChain.Direct\">MockChainEnv</a> -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainSt\" title=\"Cooked.MockChain.Direct\">MockChainSt</a> -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainT\" title=\"Cooked.MockChain.Direct\">MockChainT</a> m a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain-Direct.html#t:MockChainSt\" title=\"Cooked.MockChain.Direct\">MockChainSt</a>))","name":"runMockChainTRaw","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:runMockChainTRaw"},{"display_html":"<a href=\"#v:runMockChainTFrom\">runMockChainTFrom</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainT\" title=\"Cooked.MockChain.Direct\">MockChainT</a> m a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a>))","name":"runMockChainTFrom","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:runMockChainTFrom"},{"display_html":"<a href=\"#v:runMockChainT\">runMockChainT</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainT\" title=\"Cooked.MockChain.Direct\">MockChainT</a> m a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a>))","name":"runMockChainT","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:runMockChainT"},{"display_html":"<a href=\"#v:runMockChainRaw\">runMockChainRaw</a> :: <a href=\"Cooked-MockChain-Direct.html#t:MockChainEnv\" title=\"Cooked.MockChain.Direct\">MockChainEnv</a> -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainSt\" title=\"Cooked.MockChain.Direct\">MockChainSt</a> -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChain\" title=\"Cooked.MockChain.Direct\">MockChain</a> a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain-Direct.html#t:MockChainSt\" title=\"Cooked.MockChain.Direct\">MockChainSt</a>)","name":"runMockChainRaw","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:runMockChainRaw"},{"display_html":"<a href=\"#v:runMockChainFrom\">runMockChainFrom</a> :: <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChain\" title=\"Cooked.MockChain.Direct\">MockChain</a> a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a>)","name":"runMockChainFrom","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:runMockChainFrom"},{"display_html":"<a href=\"#v:runMockChain\">runMockChain</a> :: <a href=\"Cooked-MockChain-Direct.html#t:MockChain\" title=\"Cooked.MockChain.Direct\">MockChain</a> a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a>)","name":"runMockChain","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:runMockChain"},{"display_html":"<a href=\"#v:utxoState0\">utxoState0</a> :: <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a>","name":"utxoState0","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:utxoState0"},{"display_html":"<a href=\"#v:mockChainSt0\">mockChainSt0</a> :: <a href=\"Cooked-MockChain-Direct.html#t:MockChainSt\" title=\"Cooked.MockChain.Direct\">MockChainSt</a>","name":"mockChainSt0","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:mockChainSt0"},{"display_html":"<a href=\"#v:mockChainSt0From\">mockChainSt0From</a> :: <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainSt\" title=\"Cooked.MockChain.Direct\">MockChainSt</a>","name":"mockChainSt0From","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:mockChainSt0From"},{"display_html":"<a href=\"#v:utxoIndex0From\">utxoIndex0From</a> :: <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; UtxoIndex","name":"utxoIndex0From","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:utxoIndex0From"},{"display_html":"<a href=\"#v:utxoIndex0\">utxoIndex0</a> :: UtxoIndex","name":"utxoIndex0","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:utxoIndex0"},{"display_html":"<a href=\"#v:getIndex\">getIndex</a> :: UtxoIndex -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> TxOutRef TxOut","name":"getIndex","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:getIndex"},{"display_html":"<a href=\"#v:runTransactionValidation\">runTransactionValidation</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; Params -&gt; Tx BabbageEra -&gt; [<a href=\"Cooked-Skeleton.html#t:RawModTx\" title=\"Cooked.Skeleton\">RawModTx</a>] -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> DatumHash Datum -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> DatumHash <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> ValidatorHash (Versioned Validator) -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainT\" title=\"Cooked.MockChain.Direct\">MockChainT</a> m CardanoTx","name":"runTransactionValidation","module":"Cooked.MockChain.Direct","link":"Cooked-MockChain-Direct.html#v:runTransactionValidation"},{"display_html":"<a href=\"#v:interpretAndRunWith\">interpretAndRunWith</a> :: (<span class=\"keyword\">forall</span> m. <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainT\" title=\"Cooked.MockChain.Direct\">MockChainT</a> m a -&gt; m res) -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; [(res, <a href=\"Cooked-MockChain-Staged.html#t:MockChainLog\" title=\"Cooked.MockChain.Staged\">MockChainLog</a>)]","name":"interpretAndRunWith","module":"Cooked.MockChain.Staged","link":"Cooked-MockChain-Staged.html#v:interpretAndRunWith"},{"display_html":"<a href=\"#v:interpretAndRun\">interpretAndRun</a> :: <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; [(<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a>), <a href=\"Cooked-MockChain-Staged.html#t:MockChainLog\" title=\"Cooked.MockChain.Staged\">MockChainLog</a>)]","name":"interpretAndRun","module":"Cooked.MockChain.Staged","link":"Cooked-MockChain-Staged.html#v:interpretAndRun"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MockChainLogEntry\">MockChainLogEntry</a><ul class=\"subs\"><li>= <a href=\"#v:MCLogSubmittedTxSkel\">MCLogSubmittedTxSkel</a> <a href=\"Cooked-Skeleton.html#t:SkelContext\" title=\"Cooked.Skeleton\">SkelContext</a> <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a></li><li>| <a href=\"#v:MCLogNewTx\">MCLogNewTx</a> TxId</li><li>| <a href=\"#v:MCLogFail\">MCLogFail</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a></li></ul>","name":"MockChainLogEntry MCLogSubmittedTxSkel MCLogNewTx MCLogFail","module":"Cooked.MockChain.Staged","link":"Cooked-MockChain-Staged.html#t:MockChainLogEntry"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:MockChainLog\">MockChainLog</a> = <a href=\"#v:MockChainLog\">MockChainLog</a> {<ul class=\"subs\"><li><a href=\"#v:unMockChainLog\">unMockChainLog</a> :: [<a href=\"Cooked-MockChain-Staged.html#t:MockChainLogEntry\" title=\"Cooked.MockChain.Staged\">MockChainLogEntry</a>]</li></ul>}","name":"MockChainLog MockChainLog unMockChainLog","module":"Cooked.MockChain.Staged","link":"Cooked-MockChain-Staged.html#t:MockChainLog"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:StagedMockChain\">StagedMockChain</a> = <a href=\"Cooked-Ltl.html#t:Staged\" title=\"Cooked.Ltl\">Staged</a> MockChainOp","name":"StagedMockChain","module":"Cooked.MockChain.Staged","link":"Cooked-MockChain-Staged.html#t:StagedMockChain"},{"display_html":"<a href=\"#v:runTweakFrom\">runTweakFrom</a> :: <a href=\"Cooked-MockChain-Direct.html#t:MockChainEnv\" title=\"Cooked.MockChain.Direct\">MockChainEnv</a> -&gt; <a href=\"Cooked-MockChain-Direct.html#t:MockChainSt\" title=\"Cooked.MockChain.Direct\">MockChainSt</a> -&gt; <a href=\"Cooked-Tweak-Common.html#t:Tweak\" title=\"Cooked.Tweak.Common\">Tweak</a> InterpMockChain a -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; [<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (a, <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a>)]","name":"runTweakFrom","module":"Cooked.MockChain.Staged","link":"Cooked-MockChain-Staged.html#v:runTweakFrom"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:MonadModalBlockChain\">MonadModalBlockChain</a> m = (<a href=\"Cooked-MockChain-BlockChain.html#t:MonadBlockChain\" title=\"Cooked.MockChain.BlockChain\">MonadBlockChain</a> m, <a href=\"Cooked-Ltl.html#t:MonadModal\" title=\"Cooked.Ltl\">MonadModal</a> m, <a href=\"Cooked-Ltl.html#t:Modification\" title=\"Cooked.Ltl\">Modification</a> m ~ <a href=\"Cooked-Tweak-Common.html#t:UntypedTweak\" title=\"Cooked.Tweak.Common\">UntypedTweak</a> InterpMockChain)","name":"MonadModalBlockChain","module":"Cooked.MockChain.Staged","link":"Cooked-MockChain-Staged.html#t:MonadModalBlockChain"},{"display_html":"<a href=\"#v:somewhere\">somewhere</a> :: <a href=\"Cooked-MockChain-Staged.html#t:MonadModalBlockChain\" title=\"Cooked.MockChain.Staged\">MonadModalBlockChain</a> m =&gt; <a href=\"Cooked-Tweak-Common.html#t:Tweak\" title=\"Cooked.Tweak.Common\">Tweak</a> InterpMockChain b -&gt; m a -&gt; m a","name":"somewhere","module":"Cooked.MockChain.Staged","link":"Cooked-MockChain-Staged.html#v:somewhere"},{"display_html":"<a href=\"#v:runTweak\">runTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:Tweak\" title=\"Cooked.Tweak.Common\">Tweak</a> InterpMockChain a -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; [<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (a, <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a>)]","name":"runTweak","module":"Cooked.MockChain.Staged","link":"Cooked-MockChain-Staged.html#v:runTweak"},{"display_html":"<a href=\"#v:everywhere\">everywhere</a> :: <a href=\"Cooked-MockChain-Staged.html#t:MonadModalBlockChain\" title=\"Cooked.MockChain.Staged\">MonadModalBlockChain</a> m =&gt; <a href=\"Cooked-Tweak-Common.html#t:Tweak\" title=\"Cooked.Tweak.Common\">Tweak</a> InterpMockChain b -&gt; m a -&gt; m a","name":"everywhere","module":"Cooked.MockChain.Staged","link":"Cooked-MockChain-Staged.html#v:everywhere"},{"display_html":"<a href=\"#v:withTweak\">withTweak</a> :: <a href=\"Cooked-MockChain-Staged.html#t:MonadModalBlockChain\" title=\"Cooked.MockChain.Staged\">MonadModalBlockChain</a> m =&gt; m x -&gt; <a href=\"Cooked-Tweak-Common.html#t:Tweak\" title=\"Cooked.Tweak.Common\">Tweak</a> InterpMockChain a -&gt; m x","name":"withTweak","module":"Cooked.MockChain.Staged","link":"Cooked-MockChain-Staged.html#v:withTweak"},{"display_html":"<a href=\"#v:prettyTxSkel\">prettyTxSkel</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-Skeleton.html#t:SkelContext\" title=\"Cooked.Skeleton\">SkelContext</a> -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyTxSkel","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:prettyTxSkel"},{"display_html":"<a href=\"#v:prettyBalancingWallet\">prettyBalancingWallet</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyBalancingWallet","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:prettyBalancingWallet"},{"display_html":"<a href=\"#v:prettySigners\">prettySigners</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-Skeleton.html#t:TxOpts\" title=\"Cooked.Skeleton\">TxOpts</a> -&gt; [<a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a>] -&gt; [<a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>]","name":"prettySigners","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:prettySigners"},{"display_html":"<a href=\"#v:prettyMints\">prettyMints</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (Versioned MintingPolicy, <a href=\"Cooked-Skeleton.html#t:MintsRedeemer\" title=\"Cooked.Skeleton\">MintsRedeemer</a>, TokenName, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>) -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyMints","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:prettyMints"},{"display_html":"<a href=\"#v:mPrettyTxOpts\">mPrettyTxOpts</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-Skeleton.html#t:TxOpts\" title=\"Cooked.Skeleton\">TxOpts</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"mPrettyTxOpts","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:mPrettyTxOpts"},{"display_html":"<a href=\"#v:prettyTxSkelOut\">prettyTxSkelOut</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a> -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyTxSkelOut","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:prettyTxSkelOut"},{"display_html":"<a href=\"#v:prettyTxSkelOutDatumMaybe\">prettyTxSkelOutDatumMaybe</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyTxSkelOutDatumMaybe","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:prettyTxSkelOutDatumMaybe"},{"display_html":"<a href=\"#v:prettyTxSkelIn\">prettyTxSkelIn</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-Skeleton.html#t:SkelContext\" title=\"Cooked.Skeleton\">SkelContext</a> -&gt; (TxOutRef, <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a>) -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyTxSkelIn","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:prettyTxSkelIn"},{"display_html":"<a href=\"#v:prettyTxSkelInReference\">prettyTxSkelInReference</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-Skeleton.html#t:SkelContext\" title=\"Cooked.Skeleton\">SkelContext</a> -&gt; TxOutRef -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyTxSkelInReference","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:prettyTxSkelInReference"},{"display_html":"<a href=\"#v:prettyAddressState\">prettyAddressState</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; Address -&gt; <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoPayloadSet\" title=\"Cooked.MockChain.UtxoState\">UtxoPayloadSet</a> -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyAddressState","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:prettyAddressState"},{"display_html":"<a href=\"#v:prettyPayloadGrouped\">prettyPayloadGrouped</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; [<a href=\"Cooked-MockChain-UtxoState.html#t:UtxoPayload\" title=\"Cooked.MockChain.UtxoState\">UtxoPayload</a>] -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyPayloadGrouped","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:prettyPayloadGrouped"},{"display_html":"<a href=\"#v:prettyPayload\">prettyPayload</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a> -&gt; <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoPayload\" title=\"Cooked.MockChain.UtxoState\">UtxoPayload</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyPayload","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:prettyPayload"},{"display_html":"<a href=\"#v:prettyReferenceScriptHash\">prettyReferenceScriptHash</a> :: <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; ScriptHash -&gt; <a href=\"Cooked-Pretty-Common.html#t:DocCooked\" title=\"Cooked.Pretty.Common\">DocCooked</a>","name":"prettyReferenceScriptHash","module":"Cooked.Pretty.Cooked","link":"Cooked-Pretty-Cooked.html#v:prettyReferenceScriptHash"},{"display_html":"module <a href=\"Cooked-Pretty-Options.html\">Cooked.Pretty.Options</a>","name":"","module":"Cooked.Pretty","link":""},{"display_html":"module <a href=\"Cooked-Pretty-Cooked.html\">Cooked.Pretty.Cooked</a>","name":"","module":"Cooked.Pretty","link":""},{"display_html":"module <a href=\"Cooked-Pretty-Common.html\">Cooked.Pretty.Common</a>","name":"","module":"Cooked.Pretty","link":""},{"display_html":"module <a href=\"Cooked-Pretty-Class.html\">Cooked.Pretty.Class</a>","name":"","module":"Cooked.Pretty","link":""},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:IsProp\">IsProp</a> prop <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:testCounterexample\">testCounterexample</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; prop -&gt; prop</li><li><a href=\"#v:testConjoin\">testConjoin</a> :: [prop] -&gt; prop</li><li><a href=\"#v:testDisjoin\">testDisjoin</a> :: [prop] -&gt; prop</li><li><a href=\"#v:testFailure\">testFailure</a> :: prop</li><li><a href=\"#v:testSuccess\">testSuccess</a> :: prop</li><li><a href=\"#v:testFailureMsg\">testFailureMsg</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; prop</li></ul>","name":"IsProp testFailureMsg testSuccess testFailure testDisjoin testConjoin testCounterexample","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#t:IsProp"},{"display_html":"<a href=\"#v:testBool\">testBool</a> :: <a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a> -&gt; prop","name":"testBool","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:testBool"},{"display_html":"<a href=\"#v:testAll\">testAll</a> :: <a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop =&gt; (a -&gt; prop) -&gt; [a] -&gt; prop","name":"testAll","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:testAll"},{"display_html":"<a href=\"#v:.-61--61-.\">(.==.)</a> :: (<a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Eq\" title=\"Distribution.Compat.Prelude.Internal\">Eq</a> a) =&gt; a -&gt; a -&gt; prop","name":".==.","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:.-61--61-."},{"display_html":"<a href=\"#v:.-38--38-.\">(.&amp;&amp;.)</a> :: <a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop =&gt; prop -&gt; prop -&gt; prop","name":".&&.","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:.-38--38-."},{"display_html":"<a href=\"#v:.-124--124-.\">(.||.)</a> :: <a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop =&gt; prop -&gt; prop -&gt; prop","name":".||.","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:.-124--124-."},{"display_html":"<a href=\"#v:testSucceeds\">testSucceeds</a> :: <a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testSucceeds","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:testSucceeds"},{"display_html":"<a href=\"#v:testFails\">testFails</a> :: (<a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a) =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (<a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> -&gt; prop) -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testFails","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:testFails"},{"display_html":"<a href=\"#v:testSucceedsFrom\">testSucceedsFrom</a> :: <a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testSucceedsFrom","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:testSucceedsFrom"},{"display_html":"<a href=\"#v:testSucceedsFrom-39-\">testSucceedsFrom'</a> :: <a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (a -&gt; <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a> -&gt; prop) -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testSucceedsFrom'","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:testSucceedsFrom-39-"},{"display_html":"<a href=\"#v:testFailsFrom\">testFailsFrom</a> :: (<a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a) =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (<a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> -&gt; prop) -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testFailsFrom","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:testFailsFrom"},{"display_html":"<a href=\"#v:isCekEvaluationFailure\">isCekEvaluationFailure</a> :: <a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> -&gt; prop","name":"isCekEvaluationFailure","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:isCekEvaluationFailure"},{"display_html":"<a href=\"#v:isCekEvaluationFailureWithMsg\">isCekEvaluationFailureWithMsg</a> :: <a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> -&gt; prop","name":"isCekEvaluationFailureWithMsg","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:isCekEvaluationFailureWithMsg"},{"display_html":"<a href=\"#v:testAllSatisfiesFrom\">testAllSatisfiesFrom</a> :: <span class=\"keyword\">forall</span> prop a. <a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a>) -&gt; prop) -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testAllSatisfiesFrom","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:testAllSatisfiesFrom"},{"display_html":"<a href=\"#v:testBinaryRelatedBy\">testBinaryRelatedBy</a> :: <a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (<a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a> -&gt; <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a> -&gt; prop) -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testBinaryRelatedBy","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:testBinaryRelatedBy"},{"display_html":"<a href=\"#v:testOneEquivClass\">testOneEquivClass</a> :: <a href=\"Cooked-MockChain-Testing.html#t:IsProp\" title=\"Cooked.MockChain.Testing\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (<a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a> -&gt; <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a> -&gt; prop) -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testOneEquivClass","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:testOneEquivClass"},{"display_html":"<a href=\"#v:testSatisfiesFrom-39-\">testSatisfiesFrom'</a> :: ([(<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain-BlockChain.html#t:MockChainError\" title=\"Cooked.MockChain.BlockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoState\" title=\"Cooked.MockChain.UtxoState\">UtxoState</a>), <a href=\"Cooked-MockChain-Staged.html#t:MockChainLog\" title=\"Cooked.MockChain.Staged\">MockChainLog</a>)] -&gt; prop) -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testSatisfiesFrom'","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:testSatisfiesFrom-39-"},{"display_html":"<a href=\"#v:assertionToMaybe\">assertionToMaybe</a> :: Assertion -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> HUnitFailure)","name":"assertionToMaybe","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:assertionToMaybe"},{"display_html":"<a href=\"#v:forAll\">forAll</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a =&gt; Gen a -&gt; (a -&gt; Property) -&gt; Property","name":"forAll","module":"Cooked.MockChain.Testing","link":"Cooked-MockChain-Testing.html#v:forAll"},{"display_html":"<a href=\"#v:utxoPayloadReferenceScript\">utxoPayloadReferenceScript</a> :: <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoPayload\" title=\"Cooked.MockChain.UtxoState\">UtxoPayload</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> ScriptHash","name":"utxoPayloadReferenceScript","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxoPayloadReferenceScript"},{"display_html":"<a href=\"#v:utxoPayloadSkelOutDatum\">utxoPayloadSkelOutDatum</a> :: <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoPayload\" title=\"Cooked.MockChain.UtxoState\">UtxoPayload</a> -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a>","name":"utxoPayloadSkelOutDatum","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxoPayloadSkelOutDatum"},{"display_html":"<a href=\"#v:utxoPayloadTxOutRef\">utxoPayloadTxOutRef</a> :: <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoPayload\" title=\"Cooked.MockChain.UtxoState\">UtxoPayload</a> -&gt; TxOutRef","name":"utxoPayloadTxOutRef","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxoPayloadTxOutRef"},{"display_html":"<a href=\"#v:utxoPayloadValue\">utxoPayloadValue</a> :: <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoPayload\" title=\"Cooked.MockChain.UtxoState\">UtxoPayload</a> -&gt; Value","name":"utxoPayloadValue","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxoPayloadValue"},{"display_html":"<a href=\"#v:utxoPayloadSet\">utxoPayloadSet</a> :: <a href=\"Cooked-MockChain-UtxoState.html#t:UtxoPayloadSet\" title=\"Cooked.MockChain.UtxoState\">UtxoPayloadSet</a> -&gt; [<a href=\"Cooked-MockChain-UtxoState.html#t:UtxoPayload\" title=\"Cooked.MockChain.UtxoState\">UtxoPayload</a>]","name":"utxoPayloadSet","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxoPayloadSet"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:UtxoState\">UtxoState</a>","name":"UtxoState","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:UtxoState"},{"display_html":"<a href=\"#v:holdsInState\">holdsInState</a> :: Address -&gt; <a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a> -&gt; Value","name":"holdsInState","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:holdsInState"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:AsTrans\">AsTrans</a> t (m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) a = <a href=\"#v:AsTrans\">AsTrans</a> {<ul class=\"subs\"><li><a href=\"#v:getTrans\">getTrans</a> :: t m a</li></ul>}","name":"AsTrans AsTrans getTrans","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:AsTrans"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m =&gt; <a href=\"#t:MonadBlockChain\">MonadBlockChain</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:validateTxSkel\">validateTxSkel</a> :: <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; m CardanoTx</li></ul>","name":"MonadBlockChain validateTxSkel","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:MonadBlockChain"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m =&gt; <a href=\"#t:MonadBlockChainWithoutValidation\">MonadBlockChainWithoutValidation</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:allUtxosLedger\">allUtxosLedger</a> :: m [(TxOutRef, TxOut)]</li><li><a href=\"#v:currentSlot\">currentSlot</a> :: m Slot</li><li><a href=\"#v:awaitSlot\">awaitSlot</a> :: Slot -&gt; m Slot</li></ul>","name":"MonadBlockChainWithoutValidation allUtxosLedger awaitSlot currentSlot","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation"},{"display_html":"<span class=\"keyword\">class</span> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:MonadFail\" title=\"Distribution.Compat.Prelude.Internal\">MonadFail</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Error-Class.html#t:MonadError\" title=\"Control.Monad.Error.Class\">MonadError</a> <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> m) =&gt; <a href=\"#t:MonadBlockChainBalancing\">MonadBlockChainBalancing</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:getParams\">getParams</a> :: m Params</li><li><a href=\"#v:utxosAtLedger\">utxosAtLedger</a> :: Address -&gt; m [(TxOutRef, TxOut)]</li><li><a href=\"#v:datumFromHash\">datumFromHash</a> :: DatumHash -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> Datum)</li><li><a href=\"#v:validatorFromHash\">validatorFromHash</a> :: ValidatorHash -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (Versioned Validator))</li><li><a href=\"#v:txOutByRefLedger\">txOutByRefLedger</a> :: TxOutRef -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> TxOut)</li></ul>","name":"MonadBlockChainBalancing txOutByRefLedger validatorFromHash utxosAtLedger getParams datumFromHash","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:MonadBlockChainBalancing"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MCEUnbalanceableError\">MCEUnbalanceableError</a><ul class=\"subs\"><li>= <a href=\"#v:MCEUnbalNotEnoughFunds\">MCEUnbalNotEnoughFunds</a> <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> Value</li><li>| <a href=\"#v:MCEUnbalNotEnoughReturning\">MCEUnbalNotEnoughReturning</a> (Value, [TxOutRef]) (Value, [TxOutRef]) Value</li></ul>","name":"MCEUnbalanceableError MCEUnbalNotEnoughFunds MCEUnbalNotEnoughReturning","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:MCEUnbalanceableError"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MockChainError\">MockChainError</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:MCEValidationError\">MCEValidationError</a> :: ValidationErrorInPhase -&gt; <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a></li><li><a href=\"#v:MCEUnbalanceable\">MCEUnbalanceable</a> :: <a href=\"Cooked-MockChain.html#t:MCEUnbalanceableError\" title=\"Cooked.MockChain\">MCEUnbalanceableError</a> -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a></li><li><a href=\"#v:MCENoSuitableCollateral\">MCENoSuitableCollateral</a> :: <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a></li><li><a href=\"#v:MCEGenerationError\">MCEGenerationError</a> :: <a href=\"Cooked-MockChain-GenerateTx.html#t:GenerateTxError\" title=\"Cooked.MockChain.GenerateTx\">GenerateTxError</a> -&gt; <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a></li><li><a href=\"#v:MCECalcFee\">MCECalcFee</a> :: <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> -&gt; <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a></li><li><a href=\"#v:MCEUnknownOutRefError\">MCEUnknownOutRefError</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; TxOutRef -&gt; <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a></li><li><a href=\"#v:MCEUnknownValidator\">MCEUnknownValidator</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; ValidatorHash -&gt; <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a></li><li><a href=\"#v:MCEUnknownDatum\">MCEUnknownDatum</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; DatumHash -&gt; <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a></li><li><a href=\"#v:FailWith\">FailWith</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a></li><li><a href=\"#v:OtherMockChainError\">OtherMockChainError</a> :: (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> err, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Eq\" title=\"Distribution.Compat.Prelude.Internal\">Eq</a> err) =&gt; err -&gt; <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a></li></ul>","name":"MockChainError OtherMockChainError FailWith MCEUnknownDatum MCEUnknownValidator MCEUnknownOutRefError MCECalcFee MCEGenerationError MCENoSuitableCollateral MCEValidationError MCEUnbalanceable","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:MockChainError"},{"display_html":"<a href=\"#v:allUtxos\">allUtxos</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m =&gt; m [(TxOutRef, TxOut)]","name":"allUtxos","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:allUtxos"},{"display_html":"<a href=\"#v:utxosAt\">utxosAt</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m =&gt; Address -&gt; m [(TxOutRef, TxOut)]","name":"utxosAt","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxosAt"},{"display_html":"<a href=\"#v:txOutByRef\">txOutByRef</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m =&gt; TxOutRef -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> TxOut)","name":"txOutByRef","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:txOutByRef"},{"display_html":"<a href=\"#v:utxosFromCardanoTx\">utxosFromCardanoTx</a> :: CardanoTx -&gt; [(TxOutRef, TxOut)]","name":"utxosFromCardanoTx","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxosFromCardanoTx"},{"display_html":"<a href=\"#v:txOutV2FromLedger\">txOutV2FromLedger</a> :: TxOut -&gt; TxOut","name":"txOutV2FromLedger","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:txOutV2FromLedger"},{"display_html":"<a href=\"#v:resolveDatum\">resolveDatum</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> out, <a href=\"Cooked-Output.html#t:ToOutputDatum\" title=\"Cooked.Output\">ToOutputDatum</a> (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> out), <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m) =&gt; out -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> out) Datum (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> out) (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> out)))","name":"resolveDatum","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:resolveDatum"},{"display_html":"<a href=\"#v:resolveTypedDatum\">resolveTypedDatum</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> out, <a href=\"Cooked-Output.html#t:ToOutputDatum\" title=\"Cooked.Output\">ToOutputDatum</a> (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> out), <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m, FromData a) =&gt; out -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> out) a (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> out) (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> out)))","name":"resolveTypedDatum","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:resolveTypedDatum"},{"display_html":"<a href=\"#v:resolveValidator\">resolveValidator</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> out, <a href=\"Cooked-Output.html#t:ToCredential\" title=\"Cooked.Output\">ToCredential</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> out), <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m) =&gt; out -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (Versioned Validator) (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> out) (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> out) (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> out)))","name":"resolveValidator","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:resolveValidator"},{"display_html":"<a href=\"#v:resolveReferenceScript\">resolveReferenceScript</a> :: (<a href=\"Cooked-Output.html#t:IsAbstractOutput\" title=\"Cooked.Output\">IsAbstractOutput</a> out, <a href=\"Cooked-Output.html#t:ToScriptHash\" title=\"Cooked.Output\">ToScriptHash</a> (<a href=\"Cooked-Output.html#t:ReferenceScriptType\" title=\"Cooked.Output\">ReferenceScriptType</a> out), <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m) =&gt; out -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (<a href=\"Cooked-Output.html#t:OwnerType\" title=\"Cooked.Output\">OwnerType</a> out) (<a href=\"Cooked-Output.html#t:DatumType\" title=\"Cooked.Output\">DatumType</a> out) (<a href=\"Cooked-Output.html#t:ValueType\" title=\"Cooked.Output\">ValueType</a> out) (Versioned Validator)))","name":"resolveReferenceScript","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:resolveReferenceScript"},{"display_html":"<a href=\"#v:outputDatumFromTxOutRef\">outputDatumFromTxOutRef</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m =&gt; TxOutRef -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> OutputDatum)","name":"outputDatumFromTxOutRef","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:outputDatumFromTxOutRef"},{"display_html":"<a href=\"#v:datumFromTxOutRef\">datumFromTxOutRef</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m =&gt; TxOutRef -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> Datum)","name":"datumFromTxOutRef","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:datumFromTxOutRef"},{"display_html":"<a href=\"#v:typedDatumFromTxOutRef\">typedDatumFromTxOutRef</a> :: (FromData a, <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m) =&gt; TxOutRef -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> a)","name":"typedDatumFromTxOutRef","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:typedDatumFromTxOutRef"},{"display_html":"<a href=\"#v:valueFromTxOutRef\">valueFromTxOutRef</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m =&gt; TxOutRef -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> Value)","name":"valueFromTxOutRef","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:valueFromTxOutRef"},{"display_html":"<a href=\"#v:waitNSlots\">waitNSlots</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; m Slot","name":"waitNSlots","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:waitNSlots"},{"display_html":"<a href=\"#v:currentTime\">currentTime</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m =&gt; m (POSIXTime, POSIXTime)","name":"currentTime","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:currentTime"},{"display_html":"<a href=\"#v:slotToTimeInterval\">slotToTimeInterval</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m =&gt; Slot -&gt; m (POSIXTime, POSIXTime)","name":"slotToTimeInterval","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:slotToTimeInterval"},{"display_html":"<a href=\"#v:getEnclosingSlot\">getEnclosingSlot</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m =&gt; POSIXTime -&gt; m Slot","name":"getEnclosingSlot","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:getEnclosingSlot"},{"display_html":"<a href=\"#v:awaitEnclosingSlot\">awaitEnclosingSlot</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m =&gt; POSIXTime -&gt; m Slot","name":"awaitEnclosingSlot","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:awaitEnclosingSlot"},{"display_html":"<a href=\"#v:slotRangeBefore\">slotRangeBefore</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m =&gt; POSIXTime -&gt; m SlotRange","name":"slotRangeBefore","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:slotRangeBefore"},{"display_html":"<a href=\"#v:slotRangeAfter\">slotRangeAfter</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainWithoutValidation\" title=\"Cooked.MockChain\">MonadBlockChainWithoutValidation</a> m =&gt; POSIXTime -&gt; m SlotRange","name":"slotRangeAfter","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:slotRangeAfter"},{"display_html":"<a href=\"#v:runUtxoSearch\">runUtxoSearch</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; UtxoSearch m a -&gt; m [(TxOutRef, a)]","name":"runUtxoSearch","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:runUtxoSearch"},{"display_html":"<a href=\"#v:allUtxosSearch\">allUtxosSearch</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChain\" title=\"Cooked.MockChain\">MonadBlockChain</a> m =&gt; UtxoSearch m TxOut","name":"allUtxosSearch","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:allUtxosSearch"},{"display_html":"<a href=\"#v:allUtxosLedgerSearch\">allUtxosLedgerSearch</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChain\" title=\"Cooked.MockChain\">MonadBlockChain</a> m =&gt; UtxoSearch m TxOut","name":"allUtxosLedgerSearch","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:allUtxosLedgerSearch"},{"display_html":"<a href=\"#v:utxosAtSearch\">utxosAtSearch</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m =&gt; Address -&gt; UtxoSearch m TxOut","name":"utxosAtSearch","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxosAtSearch"},{"display_html":"<a href=\"#v:utxosAtLedgerSearch\">utxosAtLedgerSearch</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m =&gt; Address -&gt; UtxoSearch m TxOut","name":"utxosAtLedgerSearch","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxosAtLedgerSearch"},{"display_html":"<a href=\"#v:utxosFromCardanoTxSearch\">utxosFromCardanoTxSearch</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; CardanoTx -&gt; UtxoSearch m TxOut","name":"utxosFromCardanoTxSearch","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxosFromCardanoTxSearch"},{"display_html":"<a href=\"#v:txOutByRefSearch\">txOutByRefSearch</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m =&gt; [TxOutRef] -&gt; UtxoSearch m TxOut","name":"txOutByRefSearch","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:txOutByRefSearch"},{"display_html":"<a href=\"#v:filterWith\">filterWith</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; UtxoSearch m a -&gt; (a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> b)) -&gt; UtxoSearch m b","name":"filterWith","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:filterWith"},{"display_html":"<a href=\"#v:filterWithPure\">filterWithPure</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; UtxoSearch m a -&gt; (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> b) -&gt; UtxoSearch m b","name":"filterWithPure","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:filterWithPure"},{"display_html":"<a href=\"#v:filterWithOptic\">filterWithOptic</a> :: (Is k An_AffineFold, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m) =&gt; UtxoSearch m a -&gt; Optic' k is a b -&gt; UtxoSearch m b","name":"filterWithOptic","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:filterWithOptic"},{"display_html":"<a href=\"#v:filterWithPred\">filterWithPred</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; UtxoSearch m a -&gt; (a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; UtxoSearch m a","name":"filterWithPred","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:filterWithPred"},{"display_html":"<a href=\"#v:balancedTxSkel\">balancedTxSkel</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; m (<a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a>, <a href=\"Cooked-Skeleton.html#t:Fee\" title=\"Cooked.Skeleton\">Fee</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Set\" title=\"Distribution.Compat.Prelude.Internal\">Set</a> TxOutRef)","name":"balancedTxSkel","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:balancedTxSkel"},{"display_html":"<a href=\"#v:balancedTx\">balancedTx</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m =&gt; (<a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a>, <a href=\"Cooked-Skeleton.html#t:Fee\" title=\"Cooked.Skeleton\">Fee</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Set\" title=\"Distribution.Compat.Prelude.Internal\">Set</a> TxOutRef) -&gt; m (Tx BabbageEra)","name":"balancedTx","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:balancedTx"},{"display_html":"<a href=\"#v:txSkelInputData\">txSkelInputData</a> :: <a href=\"Cooked-MockChain.html#t:MonadBlockChainBalancing\" title=\"Cooked.MockChain\">MonadBlockChainBalancing</a> m =&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> DatumHash Datum)","name":"txSkelInputData","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:txSkelInputData"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:MockChain\">MockChain</a> = <a href=\"Cooked-MockChain.html#t:MockChainT\" title=\"Cooked.MockChain\">MockChainT</a> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Identity\" title=\"Distribution.Compat.Prelude.Internal\">Identity</a>","name":"MockChain","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:MockChain"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:MockChainT\">MockChainT</a> m a = <a href=\"#v:MockChainT\">MockChainT</a> {<ul class=\"subs\"><li><a href=\"#v:unMockChain\">unMockChain</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Reader.html#t:ReaderT\" title=\"Control.Monad.Reader\">ReaderT</a> <a href=\"Cooked-MockChain.html#t:MockChainEnv\" title=\"Cooked.MockChain\">MockChainEnv</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-State-Strict.html#t:StateT\" title=\"Control.Monad.State.Strict\">StateT</a> <a href=\"Cooked-MockChain.html#t:MockChainSt\" title=\"Cooked.MockChain\">MockChainSt</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Control-Monad-Except.html#t:ExceptT\" title=\"Control.Monad.Except\">ExceptT</a> <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> m)) a</li></ul>}","name":"MockChainT MockChainT unMockChain","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:MockChainT"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:MockChainEnv\">MockChainEnv</a> = <a href=\"#v:MockChainEnv\">MockChainEnv</a> {<ul class=\"subs\"><li><a href=\"#v:mceParams\">mceParams</a> :: Params</li></ul>}","name":"MockChainEnv MockChainEnv mceParams","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:MockChainEnv"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MockChainSt\">MockChainSt</a> = <a href=\"#v:MockChainSt\">MockChainSt</a> {<ul class=\"subs\"><li><a href=\"#v:mcstIndex\">mcstIndex</a> :: UtxoIndex</li><li><a href=\"#v:mcstDatums\">mcstDatums</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> DatumHash (<a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a>, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>)</li><li><a href=\"#v:mcstValidators\">mcstValidators</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> ValidatorHash (Versioned Validator)</li><li><a href=\"#v:mcstCurrentSlot\">mcstCurrentSlot</a> :: Slot</li></ul>}","name":"MockChainSt MockChainSt mcstCurrentSlot mcstValidators mcstIndex mcstDatums","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:MockChainSt"},{"display_html":"<a href=\"#v:mcstToUtxoState\">mcstToUtxoState</a> :: <a href=\"Cooked-MockChain.html#t:MockChainSt\" title=\"Cooked.MockChain\">MockChainSt</a> -&gt; <a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a>","name":"mcstToUtxoState","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:mcstToUtxoState"},{"display_html":"<a href=\"#v:combineMockChainT\">combineMockChainT</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; (<span class=\"keyword\">forall</span> a. m a -&gt; m a -&gt; m a) -&gt; <a href=\"Cooked-MockChain.html#t:MockChainT\" title=\"Cooked.MockChain\">MockChainT</a> m x -&gt; <a href=\"Cooked-MockChain.html#t:MockChainT\" title=\"Cooked.MockChain\">MockChainT</a> m x -&gt; <a href=\"Cooked-MockChain.html#t:MockChainT\" title=\"Cooked.MockChain\">MockChainT</a> m x","name":"combineMockChainT","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:combineMockChainT"},{"display_html":"<a href=\"#v:mapMockChainT\">mapMockChainT</a> :: (m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain.html#t:MockChainSt\" title=\"Cooked.MockChain\">MockChainSt</a>)) -&gt; n (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> (b, <a href=\"Cooked-MockChain.html#t:MockChainSt\" title=\"Cooked.MockChain\">MockChainSt</a>))) -&gt; <a href=\"Cooked-MockChain.html#t:MockChainT\" title=\"Cooked.MockChain\">MockChainT</a> m a -&gt; <a href=\"Cooked-MockChain.html#t:MockChainT\" title=\"Cooked.MockChain\">MockChainT</a> n b","name":"mapMockChainT","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:mapMockChainT"},{"display_html":"<a href=\"#v:runMockChainTRaw\">runMockChainTRaw</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; <a href=\"Cooked-MockChain.html#t:MockChainEnv\" title=\"Cooked.MockChain\">MockChainEnv</a> -&gt; <a href=\"Cooked-MockChain.html#t:MockChainSt\" title=\"Cooked.MockChain\">MockChainSt</a> -&gt; <a href=\"Cooked-MockChain.html#t:MockChainT\" title=\"Cooked.MockChain\">MockChainT</a> m a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain.html#t:MockChainSt\" title=\"Cooked.MockChain\">MockChainSt</a>))","name":"runMockChainTRaw","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:runMockChainTRaw"},{"display_html":"<a href=\"#v:runMockChainTFrom\">runMockChainTFrom</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain.html#t:MockChainT\" title=\"Cooked.MockChain\">MockChainT</a> m a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a>))","name":"runMockChainTFrom","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:runMockChainTFrom"},{"display_html":"<a href=\"#v:runMockChainT\">runMockChainT</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; <a href=\"Cooked-MockChain.html#t:MockChainT\" title=\"Cooked.MockChain\">MockChainT</a> m a -&gt; m (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a>))","name":"runMockChainT","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:runMockChainT"},{"display_html":"<a href=\"#v:runMockChainRaw\">runMockChainRaw</a> :: <a href=\"Cooked-MockChain.html#t:MockChainEnv\" title=\"Cooked.MockChain\">MockChainEnv</a> -&gt; <a href=\"Cooked-MockChain.html#t:MockChainSt\" title=\"Cooked.MockChain\">MockChainSt</a> -&gt; <a href=\"Cooked-MockChain.html#t:MockChain\" title=\"Cooked.MockChain\">MockChain</a> a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain.html#t:MockChainSt\" title=\"Cooked.MockChain\">MockChainSt</a>)","name":"runMockChainRaw","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:runMockChainRaw"},{"display_html":"<a href=\"#v:runMockChainFrom\">runMockChainFrom</a> :: <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain.html#t:MockChain\" title=\"Cooked.MockChain\">MockChain</a> a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a>)","name":"runMockChainFrom","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:runMockChainFrom"},{"display_html":"<a href=\"#v:runMockChain\">runMockChain</a> :: <a href=\"Cooked-MockChain.html#t:MockChain\" title=\"Cooked.MockChain\">MockChain</a> a -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a>)","name":"runMockChain","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:runMockChain"},{"display_html":"<a href=\"#v:utxoState0\">utxoState0</a> :: <a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a>","name":"utxoState0","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxoState0"},{"display_html":"<a href=\"#v:mockChainSt0\">mockChainSt0</a> :: <a href=\"Cooked-MockChain.html#t:MockChainSt\" title=\"Cooked.MockChain\">MockChainSt</a>","name":"mockChainSt0","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:mockChainSt0"},{"display_html":"<a href=\"#v:mockChainSt0From\">mockChainSt0From</a> :: <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain.html#t:MockChainSt\" title=\"Cooked.MockChain\">MockChainSt</a>","name":"mockChainSt0From","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:mockChainSt0From"},{"display_html":"<a href=\"#v:utxoIndex0From\">utxoIndex0From</a> :: <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; UtxoIndex","name":"utxoIndex0From","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxoIndex0From"},{"display_html":"<a href=\"#v:utxoIndex0\">utxoIndex0</a> :: UtxoIndex","name":"utxoIndex0","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:utxoIndex0"},{"display_html":"<a href=\"#v:getIndex\">getIndex</a> :: UtxoIndex -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> TxOutRef TxOut","name":"getIndex","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:getIndex"},{"display_html":"<a href=\"#v:runTransactionValidation\">runTransactionValidation</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; Params -&gt; Tx BabbageEra -&gt; [<a href=\"Cooked-Skeleton.html#t:RawModTx\" title=\"Cooked.Skeleton\">RawModTx</a>] -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> DatumHash Datum -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> DatumHash <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> ValidatorHash (Versioned Validator) -&gt; <a href=\"Cooked-MockChain.html#t:MockChainT\" title=\"Cooked.MockChain\">MockChainT</a> m CardanoTx","name":"runTransactionValidation","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:runTransactionValidation"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:MonadModalBlockChain\">MonadModalBlockChain</a> m = (<a href=\"Cooked-MockChain.html#t:MonadBlockChain\" title=\"Cooked.MockChain\">MonadBlockChain</a> m, <a href=\"Cooked-Ltl.html#t:MonadModal\" title=\"Cooked.Ltl\">MonadModal</a> m, <a href=\"Cooked-Ltl.html#t:Modification\" title=\"Cooked.Ltl\">Modification</a> m ~ <a href=\"Cooked-Tweak-Common.html#t:UntypedTweak\" title=\"Cooked.Tweak.Common\">UntypedTweak</a> InterpMockChain)","name":"MonadModalBlockChain","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:MonadModalBlockChain"},{"display_html":"<a href=\"#v:unMockChainLog\">unMockChainLog</a> :: <a href=\"Cooked-MockChain-Staged.html#t:MockChainLog\" title=\"Cooked.MockChain.Staged\">MockChainLog</a> -&gt; [<a href=\"Cooked-MockChain-Staged.html#t:MockChainLogEntry\" title=\"Cooked.MockChain.Staged\">MockChainLogEntry</a>]","name":"unMockChainLog","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:unMockChainLog"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:MCLogFail\">MCLogFail</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:MockChainLogEntry\" title=\"Cooked.MockChain.Staged\">MockChainLogEntry</a>","name":"MCLogFail","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:MCLogFail"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:MCLogSubmittedTxSkel\">MCLogSubmittedTxSkel</a> :: <a href=\"Cooked-Skeleton.html#t:SkelContext\" title=\"Cooked.Skeleton\">SkelContext</a> -&gt; <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:MockChainLogEntry\" title=\"Cooked.MockChain.Staged\">MockChainLogEntry</a>","name":"MCLogSubmittedTxSkel","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:MCLogSubmittedTxSkel"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:MCLogNewTx\">MCLogNewTx</a> :: TxId -&gt; <a href=\"Cooked-MockChain-Staged.html#t:MockChainLogEntry\" title=\"Cooked.MockChain.Staged\">MockChainLogEntry</a>","name":"MCLogNewTx","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:MCLogNewTx"},{"display_html":"<a href=\"#v:somewhere\">somewhere</a> :: <a href=\"Cooked-MockChain.html#t:MonadModalBlockChain\" title=\"Cooked.MockChain\">MonadModalBlockChain</a> m =&gt; <a href=\"Cooked-Tweak-Common.html#t:Tweak\" title=\"Cooked.Tweak.Common\">Tweak</a> InterpMockChain b -&gt; m a -&gt; m a","name":"somewhere","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:somewhere"},{"display_html":"<a href=\"#v:everywhere\">everywhere</a> :: <a href=\"Cooked-MockChain.html#t:MonadModalBlockChain\" title=\"Cooked.MockChain\">MonadModalBlockChain</a> m =&gt; <a href=\"Cooked-Tweak-Common.html#t:Tweak\" title=\"Cooked.Tweak.Common\">Tweak</a> InterpMockChain b -&gt; m a -&gt; m a","name":"everywhere","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:everywhere"},{"display_html":"<a href=\"#v:withTweak\">withTweak</a> :: <a href=\"Cooked-MockChain.html#t:MonadModalBlockChain\" title=\"Cooked.MockChain\">MonadModalBlockChain</a> m =&gt; m x -&gt; <a href=\"Cooked-Tweak-Common.html#t:Tweak\" title=\"Cooked.Tweak.Common\">Tweak</a> InterpMockChain a -&gt; m x","name":"withTweak","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:withTweak"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:IsProp\">IsProp</a> prop <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:testCounterexample\">testCounterexample</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; prop -&gt; prop</li><li><a href=\"#v:testConjoin\">testConjoin</a> :: [prop] -&gt; prop</li><li><a href=\"#v:testDisjoin\">testDisjoin</a> :: [prop] -&gt; prop</li><li><a href=\"#v:testFailure\">testFailure</a> :: prop</li><li><a href=\"#v:testSuccess\">testSuccess</a> :: prop</li><li><a href=\"#v:testFailureMsg\">testFailureMsg</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; prop</li></ul>","name":"IsProp testFailureMsg testSuccess testFailure testDisjoin testCounterexample testConjoin","module":"Cooked.MockChain","link":"Cooked-MockChain.html#t:IsProp"},{"display_html":"<a href=\"#v:testBool\">testBool</a> :: <a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop =&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a> -&gt; prop","name":"testBool","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:testBool"},{"display_html":"<a href=\"#v:testAll\">testAll</a> :: <a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop =&gt; (a -&gt; prop) -&gt; [a] -&gt; prop","name":"testAll","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:testAll"},{"display_html":"<a href=\"#v:.-61--61-.\">(.==.)</a> :: (<a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Eq\" title=\"Distribution.Compat.Prelude.Internal\">Eq</a> a) =&gt; a -&gt; a -&gt; prop","name":".==.","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:.-61--61-."},{"display_html":"<a href=\"#v:.-38--38-.\">(.&amp;&amp;.)</a> :: <a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop =&gt; prop -&gt; prop -&gt; prop","name":".&&.","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:.-38--38-."},{"display_html":"<a href=\"#v:.-124--124-.\">(.||.)</a> :: <a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop =&gt; prop -&gt; prop -&gt; prop","name":".||.","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:.-124--124-."},{"display_html":"<a href=\"#v:testSucceeds\">testSucceeds</a> :: <a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testSucceeds","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:testSucceeds"},{"display_html":"<a href=\"#v:testFails\">testFails</a> :: (<a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a) =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (<a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> -&gt; prop) -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testFails","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:testFails"},{"display_html":"<a href=\"#v:testSucceedsFrom\">testSucceedsFrom</a> :: <a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testSucceedsFrom","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:testSucceedsFrom"},{"display_html":"<a href=\"#v:testSucceedsFrom-39-\">testSucceedsFrom'</a> :: <a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (a -&gt; <a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a> -&gt; prop) -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testSucceedsFrom'","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:testSucceedsFrom-39-"},{"display_html":"<a href=\"#v:testFailsFrom\">testFailsFrom</a> :: (<a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a) =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (<a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> -&gt; prop) -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testFailsFrom","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:testFailsFrom"},{"display_html":"<a href=\"#v:isCekEvaluationFailure\">isCekEvaluationFailure</a> :: <a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> -&gt; prop","name":"isCekEvaluationFailure","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:isCekEvaluationFailure"},{"display_html":"<a href=\"#v:isCekEvaluationFailureWithMsg\">isCekEvaluationFailureWithMsg</a> :: <a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:String\" title=\"Distribution.Compat.Prelude.Internal\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> -&gt; prop","name":"isCekEvaluationFailureWithMsg","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:isCekEvaluationFailureWithMsg"},{"display_html":"<a href=\"#v:testAllSatisfiesFrom\">testAllSatisfiesFrom</a> :: <span class=\"keyword\">forall</span> prop a. <a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a>) -&gt; prop) -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testAllSatisfiesFrom","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:testAllSatisfiesFrom"},{"display_html":"<a href=\"#v:testBinaryRelatedBy\">testBinaryRelatedBy</a> :: <a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (<a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a> -&gt; <a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a> -&gt; prop) -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testBinaryRelatedBy","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:testBinaryRelatedBy"},{"display_html":"<a href=\"#v:testOneEquivClass\">testOneEquivClass</a> :: <a href=\"Cooked-MockChain.html#t:IsProp\" title=\"Cooked.MockChain\">IsProp</a> prop =&gt; <a href=\"Cooked-Pretty-Options.html#t:PrettyCookedOpts\" title=\"Cooked.Pretty.Options\">PrettyCookedOpts</a> -&gt; (<a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a> -&gt; <a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a> -&gt; prop) -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testOneEquivClass","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:testOneEquivClass"},{"display_html":"<a href=\"#v:testSatisfiesFrom-39-\">testSatisfiesFrom'</a> :: ([(<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Either\" title=\"Distribution.Compat.Prelude.Internal\">Either</a> <a href=\"Cooked-MockChain.html#t:MockChainError\" title=\"Cooked.MockChain\">MockChainError</a> (a, <a href=\"Cooked-MockChain.html#t:UtxoState\" title=\"Cooked.MockChain\">UtxoState</a>), <a href=\"Cooked-MockChain-Staged.html#t:MockChainLog\" title=\"Cooked.MockChain.Staged\">MockChainLog</a>)] -&gt; prop) -&gt; <a href=\"Cooked-Wallet.html#t:InitialDistribution\" title=\"Cooked.Wallet\">InitialDistribution</a> -&gt; <a href=\"Cooked-MockChain-Staged.html#t:StagedMockChain\" title=\"Cooked.MockChain.Staged\">StagedMockChain</a> a -&gt; prop","name":"testSatisfiesFrom'","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:testSatisfiesFrom-39-"},{"display_html":"<a href=\"#v:assertionToMaybe\">assertionToMaybe</a> :: Assertion -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> HUnitFailure)","name":"assertionToMaybe","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:assertionToMaybe"},{"display_html":"<a href=\"#v:forAll\">forAll</a> :: <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> a =&gt; Gen a -&gt; (a -&gt; Property) -&gt; Property","name":"forAll","module":"Cooked.MockChain","link":"Cooked-MockChain.html#v:forAll"},{"display_html":"<a href=\"#v:dupTokenAttack\">dupTokenAttack</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; (AssetClass -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>) -&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m Value","name":"dupTokenAttack","module":"Cooked.Attack.DupToken","link":"Cooked-Attack-DupToken.html#v:dupTokenAttack"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:DupTokenLbl\">DupTokenLbl</a> = <a href=\"#v:DupTokenLbl\">DupTokenLbl</a>","name":"DupTokenLbl DupTokenLbl","module":"Cooked.Attack.DupToken","link":"Cooked-Attack-DupToken.html#t:DupTokenLbl"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:DoubleSatDelta\">DoubleSatDelta</a> = (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> TxOutRef <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a>, [<a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>], <a href=\"Cooked-Skeleton.html#t:TxSkelMints\" title=\"Cooked.Skeleton\">TxSkelMints</a>)","name":"DoubleSatDelta","module":"Cooked.Attack.DoubleSat","link":"Cooked-Attack-DoubleSat.html#t:DoubleSatDelta"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:DoubleSatLbl\">DoubleSatLbl</a> = <a href=\"#v:DoubleSatLbl\">DoubleSatLbl</a>","name":"DoubleSatLbl DoubleSatLbl","module":"Cooked.Attack.DoubleSat","link":"Cooked-Attack-DoubleSat.html#t:DoubleSatLbl"},{"display_html":"<a href=\"#v:doubleSatAttack\">doubleSatAttack</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Eq\" title=\"Distribution.Compat.Prelude.Internal\">Eq</a> is, Is k A_Traversal) =&gt; ([is] -&gt; [[is]]) -&gt; Optic' k (WithIx is) <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; (is -&gt; a -&gt; m [(a, <a href=\"Cooked-Attack-DoubleSat.html#t:DoubleSatDelta\" title=\"Cooked.Attack.DoubleSat\">DoubleSatDelta</a>)]) -&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m ()","name":"doubleSatAttack","module":"Cooked.Attack.DoubleSat","link":"Cooked-Attack-DoubleSat.html#v:doubleSatAttack"},{"display_html":"<a href=\"#v:addTokenAttack\">addTokenAttack</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; (Versioned MintingPolicy -&gt; [(TokenName, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>)]) -&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m Value","name":"addTokenAttack","module":"Cooked.Attack.AddToken","link":"Cooked-Attack-AddToken.html#v:addTokenAttack"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:AddTokenLbl\">AddTokenLbl</a> = <a href=\"#v:AddTokenLbl\">AddTokenLbl</a> TokenName","name":"AddTokenLbl AddTokenLbl","module":"Cooked.Attack.AddToken","link":"Cooked-Attack-AddToken.html#t:AddTokenLbl"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:DatumHijackingLbl\">DatumHijackingLbl</a> = <a href=\"#v:DatumHijackingLbl\">DatumHijackingLbl</a> Address","name":"DatumHijackingLbl DatumHijackingLbl","module":"Cooked.Attack","link":"Cooked-Attack.html#t:DatumHijackingLbl"},{"display_html":"<a href=\"#v:redirectScriptOutputTweak\">redirectScriptOutputTweak</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, Is k A_Traversal, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> (DatumType a), ToData (DatumType a)) =&gt; Optic' k is <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (TypedValidator a) <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> Value (Versioned Script)) -&gt; (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (TypedValidator a) <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> Value (Versioned Script) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Maybe\" title=\"Distribution.Compat.Prelude.Internal\">Maybe</a> (TypedValidator a)) -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m [<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (TypedValidator a) <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> Value (Versioned Script)]","name":"redirectScriptOutputTweak","module":"Cooked.Attack","link":"Cooked-Attack.html#v:redirectScriptOutputTweak"},{"display_html":"<a href=\"#v:datumHijackingAttack\">datumHijackingAttack</a> :: <span class=\"keyword\">forall</span> a m. (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Show\" title=\"Distribution.Compat.Prelude.Internal\">Show</a> (DatumType a), <a href=\"Cooked-Pretty-Class.html#t:PrettyCooked\" title=\"Cooked.Pretty.Class\">PrettyCooked</a> (DatumType a), ToData (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> (DatumType a), <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Typeable.html#t:Typeable\" title=\"Distribution.Compat.Typeable\">Typeable</a> a) =&gt; (<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (TypedValidator a) <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> Value (Versioned Script) -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m [<a href=\"Cooked-Output.html#t:ConcreteOutput\" title=\"Cooked.Output\">ConcreteOutput</a> (TypedValidator a) <a href=\"Cooked-Skeleton.html#t:TxSkelOutDatum\" title=\"Cooked.Skeleton\">TxSkelOutDatum</a> Value (Versioned Script)]","name":"datumHijackingAttack","module":"Cooked.Attack","link":"Cooked-Attack.html#v:datumHijackingAttack"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:DupTokenLbl\">DupTokenLbl</a> = <a href=\"#v:DupTokenLbl\">DupTokenLbl</a>","name":"DupTokenLbl DupTokenLbl","module":"Cooked.Attack","link":"Cooked-Attack.html#t:DupTokenLbl"},{"display_html":"<a href=\"#v:dupTokenAttack\">dupTokenAttack</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; (AssetClass -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>) -&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m Value","name":"dupTokenAttack","module":"Cooked.Attack","link":"Cooked-Attack.html#v:dupTokenAttack"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:DoubleSatLbl\">DoubleSatLbl</a> = <a href=\"#v:DoubleSatLbl\">DoubleSatLbl</a>","name":"DoubleSatLbl DoubleSatLbl","module":"Cooked.Attack","link":"Cooked-Attack.html#t:DoubleSatLbl"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:DoubleSatDelta\">DoubleSatDelta</a> = (<a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Map\" title=\"Distribution.Compat.Prelude.Internal\">Map</a> TxOutRef <a href=\"Cooked-Skeleton.html#t:TxSkelRedeemer\" title=\"Cooked.Skeleton\">TxSkelRedeemer</a>, [<a href=\"Cooked-Skeleton.html#t:TxSkelOut\" title=\"Cooked.Skeleton\">TxSkelOut</a>], <a href=\"Cooked-Skeleton.html#t:TxSkelMints\" title=\"Cooked.Skeleton\">TxSkelMints</a>)","name":"DoubleSatDelta","module":"Cooked.Attack","link":"Cooked-Attack.html#t:DoubleSatDelta"},{"display_html":"<a href=\"#v:doubleSatAttack\">doubleSatAttack</a> :: (<a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Eq\" title=\"Distribution.Compat.Prelude.Internal\">Eq</a> is, Is k A_Traversal) =&gt; ([is] -&gt; [[is]]) -&gt; Optic' k (WithIx is) <a href=\"Cooked-Skeleton.html#t:TxSkel\" title=\"Cooked.Skeleton\">TxSkel</a> a -&gt; (is -&gt; a -&gt; m [(a, <a href=\"Cooked-Attack.html#t:DoubleSatDelta\" title=\"Cooked.Attack\">DoubleSatDelta</a>)]) -&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m ()","name":"doubleSatAttack","module":"Cooked.Attack","link":"Cooked-Attack.html#v:doubleSatAttack"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:AddTokenLbl\">AddTokenLbl</a> = <a href=\"#v:AddTokenLbl\">AddTokenLbl</a> TokenName","name":"AddTokenLbl AddTokenLbl","module":"Cooked.Attack","link":"Cooked-Attack.html#t:AddTokenLbl"},{"display_html":"<a href=\"#v:addTokenAttack\">addTokenAttack</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; (Versioned MintingPolicy -&gt; [(TokenName, <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a>)]) -&gt; <a href=\"Cooked-Wallet.html#t:Wallet\" title=\"Cooked.Wallet\">Wallet</a> -&gt; m Value","name":"addTokenAttack","module":"Cooked.Attack","link":"Cooked-Attack.html#v:addTokenAttack"},{"display_html":"module <a href=\"Cooked-Wallet.html\">Cooked.Wallet</a>","name":"","module":"Cooked","link":""},{"display_html":"module <a href=\"Cooked-ValueUtils.html\">Cooked.ValueUtils</a>","name":"","module":"Cooked","link":""},{"display_html":"module <a href=\"Cooked-Tweak.html\">Cooked.Tweak</a>","name":"","module":"Cooked","link":""},{"display_html":"module <a href=\"Cooked-Skeleton.html\">Cooked.Skeleton</a>","name":"","module":"Cooked","link":""},{"display_html":"module <a href=\"Cooked-ShowBS.html\">Cooked.ShowBS</a>","name":"","module":"Cooked","link":""},{"display_html":"module <a href=\"Cooked-RawUPLC.html\">Cooked.RawUPLC</a>","name":"","module":"Cooked","link":""},{"display_html":"module <a href=\"Cooked-Pretty.html\">Cooked.Pretty</a>","name":"","module":"Cooked","link":""},{"display_html":"module <a href=\"Cooked-Output.html\">Cooked.Output</a>","name":"","module":"Cooked","link":""},{"display_html":"module <a href=\"Cooked-MockChain.html\">Cooked.MockChain</a>","name":"","module":"Cooked","link":""},{"display_html":"module <a href=\"Cooked-Currencies.html\">Cooked.Currencies</a>","name":"","module":"Cooked","link":""},{"display_html":"module <a href=\"Cooked-Attack.html\">Cooked.Attack</a>","name":"","module":"Cooked","link":""},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Monad\" title=\"Distribution.Compat.Prelude.Internal\">Monad</a> m =&gt; <a href=\"#t:MonadModal\">MonadModal</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><span class=\"keyword\">type</span> <a href=\"#t:Modification\">Modification</a> m :: <a href=\"https://hackage.haskell.org/package/-/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a></li><li><a href=\"#v:modifyLtl\">modifyLtl</a> :: <a href=\"Cooked.html#t:Ltl\" title=\"Cooked\">Ltl</a> (<a href=\"Cooked.html#t:Modification\" title=\"Cooked\">Modification</a> m) -&gt; m a -&gt; m a</li></ul>","name":"MonadModal Modification modifyLtl","module":"Cooked","link":"Cooked.html#t:MonadModal"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Ltl\">Ltl</a> a<ul class=\"subs\"><li>= <a href=\"#v:LtlTruth\">LtlTruth</a></li><li>| <a href=\"#v:LtlFalsity\">LtlFalsity</a></li><li>| <a href=\"#v:LtlAtom\">LtlAtom</a> a</li><li>| <a href=\"#v:LtlOr\">LtlOr</a> (<a href=\"Cooked.html#t:Ltl\" title=\"Cooked\">Ltl</a> a) (<a href=\"Cooked.html#t:Ltl\" title=\"Cooked\">Ltl</a> a)</li><li>| <a href=\"#v:LtlAnd\">LtlAnd</a> (<a href=\"Cooked.html#t:Ltl\" title=\"Cooked\">Ltl</a> a) (<a href=\"Cooked.html#t:Ltl\" title=\"Cooked\">Ltl</a> a)</li><li>| <a href=\"#v:LtlNext\">LtlNext</a> (<a href=\"Cooked.html#t:Ltl\" title=\"Cooked\">Ltl</a> a)</li><li>| <a href=\"#v:LtlUntil\">LtlUntil</a> (<a href=\"Cooked.html#t:Ltl\" title=\"Cooked\">Ltl</a> a) (<a href=\"Cooked.html#t:Ltl\" title=\"Cooked\">Ltl</a> a)</li><li>| <a href=\"#v:LtlRelease\">LtlRelease</a> (<a href=\"Cooked.html#t:Ltl\" title=\"Cooked\">Ltl</a> a) (<a href=\"Cooked.html#t:Ltl\" title=\"Cooked\">Ltl</a> a)</li></ul>","name":"Ltl LtlTruth LtlFalsity LtlAtom LtlOr LtlAnd LtlNext LtlUntil LtlRelease","module":"Cooked","link":"Cooked.html#t:Ltl"},{"display_html":"<a href=\"#v:getValidityRangeTweak\">getValidityRangeTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; m SlotRange","name":"getValidityRangeTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:getValidityRangeTweak"},{"display_html":"<a href=\"#v:setValidityRangeTweak\">setValidityRangeTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; SlotRange -&gt; m SlotRange","name":"setValidityRangeTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:setValidityRangeTweak"},{"display_html":"<a href=\"#v:setAlwaysValidRangeTweak\">setAlwaysValidRangeTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; m SlotRange","name":"setAlwaysValidRangeTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:setAlwaysValidRangeTweak"},{"display_html":"<a href=\"#v:validityRangeSatisfiesTweak\">validityRangeSatisfiesTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; (SlotRange -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>) -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"validityRangeSatisfiesTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:validityRangeSatisfiesTweak"},{"display_html":"<a href=\"#v:isValidAtTweak\">isValidAtTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; Slot -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"isValidAtTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:isValidAtTweak"},{"display_html":"<a href=\"#v:isValidNowTweak\">isValidNowTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"isValidNowTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:isValidNowTweak"},{"display_html":"<a href=\"#v:isValidDuringTweak\">isValidDuringTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; SlotRange -&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"isValidDuringTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:isValidDuringTweak"},{"display_html":"<a href=\"#v:hasEmptyTimeRangeTweak\">hasEmptyTimeRangeTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"hasEmptyTimeRangeTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:hasEmptyTimeRangeTweak"},{"display_html":"<a href=\"#v:hasFullTimeRangeTweak\">hasFullTimeRangeTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; m <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Bool\" title=\"Distribution.Compat.Prelude.Internal\">Bool</a>","name":"hasFullTimeRangeTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:hasFullTimeRangeTweak"},{"display_html":"<a href=\"#v:intersectValidityRangeTweak\">intersectValidityRangeTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; SlotRange -&gt; m SlotRange","name":"intersectValidityRangeTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:intersectValidityRangeTweak"},{"display_html":"<a href=\"#v:centerAroundValidityRangeTweak\">centerAroundValidityRangeTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; Slot -&gt; <a href=\"https://hackage.haskell.org/package/-/docs/Distribution-Compat-Prelude-Internal.html#t:Integer\" title=\"Distribution.Compat.Prelude.Internal\">Integer</a> -&gt; m SlotRange","name":"centerAroundValidityRangeTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:centerAroundValidityRangeTweak"},{"display_html":"<a href=\"#v:makeValidityRangeSingletonTweak\">makeValidityRangeSingletonTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; Slot -&gt; m SlotRange","name":"makeValidityRangeSingletonTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:makeValidityRangeSingletonTweak"},{"display_html":"<a href=\"#v:makeValidityRangeNowTweak\">makeValidityRangeNowTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; m SlotRange","name":"makeValidityRangeNowTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:makeValidityRangeNowTweak"},{"display_html":"<a href=\"#v:waitUntilValidTweak\">waitUntilValidTweak</a> :: <a href=\"Cooked-Tweak-Common.html#t:MonadTweak\" title=\"Cooked.Tweak.Common\">MonadTweak</a> m =&gt; m Slot","name":"waitUntilValidTweak","module":"Cooked.Tweak.ValidityRange","link":"Cooked-Tweak-ValidityRange.html#v:waitUntilValidTweak"}]